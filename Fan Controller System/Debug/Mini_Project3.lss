
Mini_Project3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c82  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014a  00800060  00002c82  00002cf6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000023a0  00000000  00000000  00002e40  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000fa4  00000000  00000000  000051e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00006184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00006324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00006516  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  00008921  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  00009ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000ae80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000b040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000b336  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000bca4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 1d 11 	call	0x223a	; 0x223a <main>
      7a:	0c 94 3f 16 	jmp	0x2c7e	; 0x2c7e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 d7 15 	jmp	0x2bae	; 0x2bae <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ae e9       	ldi	r26, 0x9E	; 158
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 e3 15 	jmp	0x2bc6	; 0x2bc6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 ff 15 	jmp	0x2bfe	; 0x2bfe <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 e3 15 	jmp	0x2bc6	; 0x2bc6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 ff 15 	jmp	0x2bfe	; 0x2bfe <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 d7 15 	jmp	0x2bae	; 0x2bae <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8e e9       	ldi	r24, 0x9E	; 158
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6e e9       	ldi	r22, 0x9E	; 158
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 e3 15 	jmp	0x2bc6	; 0x2bc6 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 ff 15 	jmp	0x2bfe	; 0x2bfe <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 e3 15 	jmp	0x2bc6	; 0x2bc6 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 ff 15 	jmp	0x2bfe	; 0x2bfe <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 e3 15 	jmp	0x2bc6	; 0x2bc6 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 ff 15 	jmp	0x2bfe	; 0x2bfe <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 03 16 	jmp	0x2c06	; 0x2c06 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 df 15 	jmp	0x2bbe	; 0x2bbe <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	ea 55       	subi	r30, 0x5A	; 90
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <ADC_init>:
 * Description:
 * 	Enable Module ADC
 */

void ADC_init(const ConfigType * Config_Ptr)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	00 d0       	rcall	.+0      	; 0xe24 <ADC_init+0x6>
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	9a 83       	std	Y+2, r25	; 0x02
     e2a:	89 83       	std	Y+1, r24	; 0x01
	/*			ADMUX Register
	 * 1.Choose Choose Referance Volt
	 * 2.ADC Left AdjustResult =0 (disable)
	 * 3.Channel Zero as initial value MUX0:MUX4=0
	 */
	ADMUX= (ADMUX & 0x3F) | ((Config_Ptr->refVolt<<6));
     e2c:	a7 e2       	ldi	r26, 0x27	; 39
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e7 e2       	ldi	r30, 0x27	; 39
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	28 2f       	mov	r18, r24
     e38:	2f 73       	andi	r18, 0x3F	; 63
     e3a:	e9 81       	ldd	r30, Y+1	; 0x01
     e3c:	fa 81       	ldd	r31, Y+2	; 0x02
     e3e:	80 81       	ld	r24, Z
     e40:	88 2f       	mov	r24, r24
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	00 24       	eor	r0, r0
     e46:	96 95       	lsr	r25
     e48:	87 95       	ror	r24
     e4a:	07 94       	ror	r0
     e4c:	96 95       	lsr	r25
     e4e:	87 95       	ror	r24
     e50:	07 94       	ror	r0
     e52:	98 2f       	mov	r25, r24
     e54:	80 2d       	mov	r24, r0
     e56:	82 2b       	or	r24, r18
     e58:	8c 93       	st	X, r24
	/*		ADCSRA Register
	 * 1.Enable ADC
	 * 2.Disable Interrupt
	 * 3.Choose Prescaler		F of ADC Range 50:200 KHZ
	 */
	SET_BIT(ADCSRA,ADEN);
     e5a:	a6 e2       	ldi	r26, 0x26	; 38
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e6 e2       	ldi	r30, 0x26	; 38
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	80 68       	ori	r24, 0x80	; 128
     e66:	8c 93       	st	X, r24
	ADCSRA= (ADCSRA & 0xF8) | (Config_Ptr->preScaler);
     e68:	a6 e2       	ldi	r26, 0x26	; 38
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e6 e2       	ldi	r30, 0x26	; 38
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	98 2f       	mov	r25, r24
     e74:	98 7f       	andi	r25, 0xF8	; 248
     e76:	e9 81       	ldd	r30, Y+1	; 0x01
     e78:	fa 81       	ldd	r31, Y+2	; 0x02
     e7a:	81 81       	ldd	r24, Z+1	; 0x01
     e7c:	89 2b       	or	r24, r25
     e7e:	8c 93       	st	X, r24
}
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	08 95       	ret

00000e8a <ADC_readChannel>:
 * Description:
 * 	Return digital Value of ADC
 */

uint16 ADC_readChannel(uint8 ch_num)
{
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	0f 92       	push	r0
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	89 83       	std	Y+1, r24	; 0x01
	/*Insert Num of channel to MUX0:Mux4*/
	ADMUX=(ADMUX & 0xE0) | (ch_num & 0x07);
     e96:	a7 e2       	ldi	r26, 0x27	; 39
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e7 e2       	ldi	r30, 0x27	; 39
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	98 2f       	mov	r25, r24
     ea2:	90 7e       	andi	r25, 0xE0	; 224
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	87 70       	andi	r24, 0x07	; 7
     ea8:	89 2b       	or	r24, r25
     eaa:	8c 93       	st	X, r24
	/*Start Conversion*/
	SET_BIT(ADCSRA,ADSC);
     eac:	a6 e2       	ldi	r26, 0x26	; 38
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e6 e2       	ldi	r30, 0x26	; 38
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	80 64       	ori	r24, 0x40	; 64
     eb8:	8c 93       	st	X, r24
	/* Using Polling Techniques*/
	while(BIT_IS_CLEAR(ADCSRA,ADSC)){};
     eba:	e6 e2       	ldi	r30, 0x26	; 38
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	88 2f       	mov	r24, r24
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	80 74       	andi	r24, 0x40	; 64
     ec6:	90 70       	andi	r25, 0x00	; 0
     ec8:	00 97       	sbiw	r24, 0x00	; 0
     eca:	b9 f3       	breq	.-18     	; 0xeba <ADC_readChannel+0x30>
	/*Clear Flag */
	SET_BIT(ADCSRA,ADIF);
     ecc:	a6 e2       	ldi	r26, 0x26	; 38
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e6 e2       	ldi	r30, 0x26	; 38
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	80 61       	ori	r24, 0x10	; 16
     ed8:	8c 93       	st	X, r24
	/* Return Data Register*/
	return ADC;
     eda:	e4 e2       	ldi	r30, 0x24	; 36
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	91 81       	ldd	r25, Z+1	; 0x01
}
     ee2:	0f 90       	pop	r0
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	08 95       	ret

00000eea <DcMotor_init>:
 * 	The Function responsible for setup the direction for the two
 *	motor pins through the GPIO driver.
 *	Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_init(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	/* Make Motor which connected to motor O/P pins*/
	GPIO_setupPinDirection(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_FIRST_PIN_ID,OUTPUT_PIN);
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	60 e0       	ldi	r22, 0x00	; 0
     ef6:	41 e0       	ldi	r20, 0x01	; 1
     ef8:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_SECOND_PIN_ID,OUTPUT_PIN);
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	61 e0       	ldi	r22, 0x01	; 1
     f00:	41 e0       	ldi	r20, 0x01	; 1
     f02:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <GPIO_setupPinDirection>
	/*	Write LOW to make motor in Stop mode*/
	GPIO_writePin(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_FIRST_PIN_ID,LOGIC_LOW);
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	60 e0       	ldi	r22, 0x00	; 0
     f0a:	40 e0       	ldi	r20, 0x00	; 0
     f0c:	0e 94 de 08 	call	0x11bc	; 0x11bc <GPIO_writePin>
	GPIO_writePin(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_SECOND_PIN_ID,LOGIC_LOW);
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	40 e0       	ldi	r20, 0x00	; 0
     f16:	0e 94 de 08 	call	0x11bc	; 0x11bc <GPIO_writePin>
}
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	08 95       	ret

00000f20 <DcMotor_Rotate>:
 *	stop the motor based on the state input state value.
 *	Send the required duty cycle to the PWM driver based on the
 *  required speed value.
 */
void DcMotor_Rotate(DcMotor_State  state ,uint8 speed)
{
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	2a 97       	sbiw	r28, 0x0a	; 10
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	8c 83       	std	Y+4, r24	; 0x04
     f36:	6d 83       	std	Y+5, r22	; 0x05
	/*
	 * 1.Fast PWM MODE
	 * 2.Non Inverting
	 * 3.Prescaler 8
	 */
	Config_Timer0 Timer0_Confige= {PWM_Fast , Non_Inverting , P_8};
     f38:	ce 01       	movw	r24, r28
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	9f 83       	std	Y+7, r25	; 0x07
     f3e:	8e 83       	std	Y+6, r24	; 0x06
     f40:	e6 ea       	ldi	r30, 0xA6	; 166
     f42:	f1 e0       	ldi	r31, 0x01	; 1
     f44:	f9 87       	std	Y+9, r31	; 0x09
     f46:	e8 87       	std	Y+8, r30	; 0x08
     f48:	f3 e0       	ldi	r31, 0x03	; 3
     f4a:	fa 87       	std	Y+10, r31	; 0x0a
     f4c:	e8 85       	ldd	r30, Y+8	; 0x08
     f4e:	f9 85       	ldd	r31, Y+9	; 0x09
     f50:	00 80       	ld	r0, Z
     f52:	88 85       	ldd	r24, Y+8	; 0x08
     f54:	99 85       	ldd	r25, Y+9	; 0x09
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	99 87       	std	Y+9, r25	; 0x09
     f5a:	88 87       	std	Y+8, r24	; 0x08
     f5c:	ee 81       	ldd	r30, Y+6	; 0x06
     f5e:	ff 81       	ldd	r31, Y+7	; 0x07
     f60:	00 82       	st	Z, r0
     f62:	8e 81       	ldd	r24, Y+6	; 0x06
     f64:	9f 81       	ldd	r25, Y+7	; 0x07
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	9f 83       	std	Y+7, r25	; 0x07
     f6a:	8e 83       	std	Y+6, r24	; 0x06
     f6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f6e:	91 50       	subi	r25, 0x01	; 1
     f70:	9a 87       	std	Y+10, r25	; 0x0a
     f72:	ea 85       	ldd	r30, Y+10	; 0x0a
     f74:	ee 23       	and	r30, r30
     f76:	51 f7       	brne	.-44     	; 0xf4c <DcMotor_Rotate+0x2c>
	/*Choose How DC_Motor Rotate CCW , CW ,Stop*/
	if(state==Stop)
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	88 23       	and	r24, r24
     f7c:	59 f4       	brne	.+22     	; 0xf94 <DcMotor_Rotate+0x74>
	{
		/*Stop A=0  , B=0*/
		GPIO_writePin(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_FIRST_PIN_ID,LOGIC_LOW);
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	60 e0       	ldi	r22, 0x00	; 0
     f82:	40 e0       	ldi	r20, 0x00	; 0
     f84:	0e 94 de 08 	call	0x11bc	; 0x11bc <GPIO_writePin>
		GPIO_writePin(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_SECOND_PIN_ID,LOGIC_LOW);
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	61 e0       	ldi	r22, 0x01	; 1
     f8c:	40 e0       	ldi	r20, 0x00	; 0
     f8e:	0e 94 de 08 	call	0x11bc	; 0x11bc <GPIO_writePin>
     f92:	1b c0       	rjmp	.+54     	; 0xfca <DcMotor_Rotate+0xaa>
	}
	else if(state==Clock_Wise)
     f94:	8c 81       	ldd	r24, Y+4	; 0x04
     f96:	82 30       	cpi	r24, 0x02	; 2
     f98:	59 f4       	brne	.+22     	; 0xfb0 <DcMotor_Rotate+0x90>
	{
		/* CW A=1 ,B=0*/
		GPIO_writePin(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_FIRST_PIN_ID,LOGIC_HIGH);
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	41 e0       	ldi	r20, 0x01	; 1
     fa0:	0e 94 de 08 	call	0x11bc	; 0x11bc <GPIO_writePin>
		GPIO_writePin(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_SECOND_PIN_ID,LOGIC_LOW);
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	61 e0       	ldi	r22, 0x01	; 1
     fa8:	40 e0       	ldi	r20, 0x00	; 0
     faa:	0e 94 de 08 	call	0x11bc	; 0x11bc <GPIO_writePin>
     fae:	0d c0       	rjmp	.+26     	; 0xfca <DcMotor_Rotate+0xaa>
	}
	else if(state==Anti_Clock_Wise)
     fb0:	8c 81       	ldd	r24, Y+4	; 0x04
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	51 f4       	brne	.+20     	; 0xfca <DcMotor_Rotate+0xaa>
	{
		/*Anti CCW A=0 ,B=1 */
		GPIO_writePin(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_FIRST_PIN_ID,LOGIC_LOW);
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	0e 94 de 08 	call	0x11bc	; 0x11bc <GPIO_writePin>
		GPIO_writePin(DC_MOTORT_PORT_ID,DC_MOTOR_INPUT_SECOND_PIN_ID,LOGIC_HIGH);
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	61 e0       	ldi	r22, 0x01	; 1
     fc4:	41 e0       	ldi	r20, 0x01	; 1
     fc6:	0e 94 de 08 	call	0x11bc	; 0x11bc <GPIO_writePin>
	}
	/*Call PWM from MCAL Throug DC_motor in HAL not Main and send to it Configuration*/
	PWM_Timer0_Start( &Timer0_Confige , speed);
     fca:	ce 01       	movw	r24, r28
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	6d 81       	ldd	r22, Y+5	; 0x05
     fd0:	0e 94 a1 10 	call	0x2142	; 0x2142 <PWM_Timer0_Start>
}
     fd4:	2a 96       	adiw	r28, 0x0a	; 10
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	de bf       	out	0x3e, r29	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num , uint8 pin_num ,GPIO_pinDirectionType direction)
{
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	00 d0       	rcall	.+0      	; 0xfec <GPIO_setupPinDirection+0x6>
     fec:	00 d0       	rcall	.+0      	; 0xfee <GPIO_setupPinDirection+0x8>
     fee:	0f 92       	push	r0
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	89 83       	std	Y+1, r24	; 0x01
     ff6:	6a 83       	std	Y+2, r22	; 0x02
     ff8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if( (port_num>=NUM_OF_PORTs) || (pin_num>=NUM_PINS_PER_PORT))
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	84 30       	cpi	r24, 0x04	; 4
     ffe:	08 f0       	brcs	.+2      	; 0x1002 <GPIO_setupPinDirection+0x1c>
    1000:	d5 c0       	rjmp	.+426    	; 0x11ac <GPIO_setupPinDirection+0x1c6>
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	88 30       	cpi	r24, 0x08	; 8
    1006:	08 f0       	brcs	.+2      	; 0x100a <GPIO_setupPinDirection+0x24>
    1008:	d1 c0       	rjmp	.+418    	; 0x11ac <GPIO_setupPinDirection+0x1c6>
	{
		/*Do Nothing*/
	}
	else
	{
		switch(port_num)
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	3d 83       	std	Y+5, r19	; 0x05
    1012:	2c 83       	std	Y+4, r18	; 0x04
    1014:	8c 81       	ldd	r24, Y+4	; 0x04
    1016:	9d 81       	ldd	r25, Y+5	; 0x05
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	91 05       	cpc	r25, r1
    101c:	09 f4       	brne	.+2      	; 0x1020 <GPIO_setupPinDirection+0x3a>
    101e:	43 c0       	rjmp	.+134    	; 0x10a6 <GPIO_setupPinDirection+0xc0>
    1020:	2c 81       	ldd	r18, Y+4	; 0x04
    1022:	3d 81       	ldd	r19, Y+5	; 0x05
    1024:	22 30       	cpi	r18, 0x02	; 2
    1026:	31 05       	cpc	r19, r1
    1028:	2c f4       	brge	.+10     	; 0x1034 <GPIO_setupPinDirection+0x4e>
    102a:	8c 81       	ldd	r24, Y+4	; 0x04
    102c:	9d 81       	ldd	r25, Y+5	; 0x05
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	71 f0       	breq	.+28     	; 0x104e <GPIO_setupPinDirection+0x68>
    1032:	bc c0       	rjmp	.+376    	; 0x11ac <GPIO_setupPinDirection+0x1c6>
    1034:	2c 81       	ldd	r18, Y+4	; 0x04
    1036:	3d 81       	ldd	r19, Y+5	; 0x05
    1038:	22 30       	cpi	r18, 0x02	; 2
    103a:	31 05       	cpc	r19, r1
    103c:	09 f4       	brne	.+2      	; 0x1040 <GPIO_setupPinDirection+0x5a>
    103e:	5f c0       	rjmp	.+190    	; 0x10fe <GPIO_setupPinDirection+0x118>
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	9d 81       	ldd	r25, Y+5	; 0x05
    1044:	83 30       	cpi	r24, 0x03	; 3
    1046:	91 05       	cpc	r25, r1
    1048:	09 f4       	brne	.+2      	; 0x104c <GPIO_setupPinDirection+0x66>
    104a:	85 c0       	rjmp	.+266    	; 0x1156 <GPIO_setupPinDirection+0x170>
    104c:	af c0       	rjmp	.+350    	; 0x11ac <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == OUTPUT_PIN)
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	a1 f4       	brne	.+40     	; 0x107c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1054:	aa e3       	ldi	r26, 0x3A	; 58
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	ea e3       	ldi	r30, 0x3A	; 58
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	48 2f       	mov	r20, r24
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 2e       	mov	r0, r18
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <GPIO_setupPinDirection+0x8c>
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	0a 94       	dec	r0
    1074:	e2 f7       	brpl	.-8      	; 0x106e <GPIO_setupPinDirection+0x88>
    1076:	84 2b       	or	r24, r20
    1078:	8c 93       	st	X, r24
    107a:	98 c0       	rjmp	.+304    	; 0x11ac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    107c:	aa e3       	ldi	r26, 0x3A	; 58
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	ea e3       	ldi	r30, 0x3A	; 58
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <GPIO_setupPinDirection+0xb4>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <GPIO_setupPinDirection+0xb0>
    109e:	80 95       	com	r24
    10a0:	84 23       	and	r24, r20
    10a2:	8c 93       	st	X, r24
    10a4:	83 c0       	rjmp	.+262    	; 0x11ac <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == OUTPUT_PIN)
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	a1 f4       	brne	.+40     	; 0x10d4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    10ac:	a7 e3       	ldi	r26, 0x37	; 55
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e7 e3       	ldi	r30, 0x37	; 55
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <GPIO_setupPinDirection+0xe4>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <GPIO_setupPinDirection+0xe0>
    10ce:	84 2b       	or	r24, r20
    10d0:	8c 93       	st	X, r24
    10d2:	6c c0       	rjmp	.+216    	; 0x11ac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    10d4:	a7 e3       	ldi	r26, 0x37	; 55
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e7 e3       	ldi	r30, 0x37	; 55
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 2e       	mov	r0, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <GPIO_setupPinDirection+0x10c>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <GPIO_setupPinDirection+0x108>
    10f6:	80 95       	com	r24
    10f8:	84 23       	and	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	57 c0       	rjmp	.+174    	; 0x11ac <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == OUTPUT_PIN)
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	a1 f4       	brne	.+40     	; 0x112c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1104:	a4 e3       	ldi	r26, 0x34	; 52
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e4 e3       	ldi	r30, 0x34	; 52
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	48 2f       	mov	r20, r24
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	02 2e       	mov	r0, r18
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <GPIO_setupPinDirection+0x13c>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	0a 94       	dec	r0
    1124:	e2 f7       	brpl	.-8      	; 0x111e <GPIO_setupPinDirection+0x138>
    1126:	84 2b       	or	r24, r20
    1128:	8c 93       	st	X, r24
    112a:	40 c0       	rjmp	.+128    	; 0x11ac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    112c:	a4 e3       	ldi	r26, 0x34	; 52
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e4 e3       	ldi	r30, 0x34	; 52
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <GPIO_setupPinDirection+0x164>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <GPIO_setupPinDirection+0x160>
    114e:	80 95       	com	r24
    1150:	84 23       	and	r24, r20
    1152:	8c 93       	st	X, r24
    1154:	2b c0       	rjmp	.+86     	; 0x11ac <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == OUTPUT_PIN)
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	81 30       	cpi	r24, 0x01	; 1
    115a:	a1 f4       	brne	.+40     	; 0x1184 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    115c:	a1 e3       	ldi	r26, 0x31	; 49
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e1 e3       	ldi	r30, 0x31	; 49
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	48 2f       	mov	r20, r24
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 2e       	mov	r0, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <GPIO_setupPinDirection+0x194>
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	0a 94       	dec	r0
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <GPIO_setupPinDirection+0x190>
    117e:	84 2b       	or	r24, r20
    1180:	8c 93       	st	X, r24
    1182:	14 c0       	rjmp	.+40     	; 0x11ac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1184:	a1 e3       	ldi	r26, 0x31	; 49
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e1 e3       	ldi	r30, 0x31	; 49
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	48 2f       	mov	r20, r24
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	02 2e       	mov	r0, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <GPIO_setupPinDirection+0x1bc>
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	0a 94       	dec	r0
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <GPIO_setupPinDirection+0x1b8>
    11a6:	80 95       	com	r24
    11a8:	84 23       	and	r24, r20
    11aa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num ,uint8 pin_num ,uint8 value)
{
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	00 d0       	rcall	.+0      	; 0x11c2 <GPIO_writePin+0x6>
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <GPIO_writePin+0x8>
    11c4:	0f 92       	push	r0
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	89 83       	std	Y+1, r24	; 0x01
    11cc:	6a 83       	std	Y+2, r22	; 0x02
    11ce:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if( (port_num>=NUM_OF_PORTs) || (pin_num>=NUM_PINS_PER_PORT))
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	84 30       	cpi	r24, 0x04	; 4
    11d4:	08 f0       	brcs	.+2      	; 0x11d8 <GPIO_writePin+0x1c>
    11d6:	d5 c0       	rjmp	.+426    	; 0x1382 <GPIO_writePin+0x1c6>
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	88 30       	cpi	r24, 0x08	; 8
    11dc:	08 f0       	brcs	.+2      	; 0x11e0 <GPIO_writePin+0x24>
    11de:	d1 c0       	rjmp	.+418    	; 0x1382 <GPIO_writePin+0x1c6>
	{
		/*Do Nothing*/
	}
	else
	{
		switch(port_num)
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	3d 83       	std	Y+5, r19	; 0x05
    11e8:	2c 83       	std	Y+4, r18	; 0x04
    11ea:	8c 81       	ldd	r24, Y+4	; 0x04
    11ec:	9d 81       	ldd	r25, Y+5	; 0x05
    11ee:	81 30       	cpi	r24, 0x01	; 1
    11f0:	91 05       	cpc	r25, r1
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <GPIO_writePin+0x3a>
    11f4:	43 c0       	rjmp	.+134    	; 0x127c <GPIO_writePin+0xc0>
    11f6:	2c 81       	ldd	r18, Y+4	; 0x04
    11f8:	3d 81       	ldd	r19, Y+5	; 0x05
    11fa:	22 30       	cpi	r18, 0x02	; 2
    11fc:	31 05       	cpc	r19, r1
    11fe:	2c f4       	brge	.+10     	; 0x120a <GPIO_writePin+0x4e>
    1200:	8c 81       	ldd	r24, Y+4	; 0x04
    1202:	9d 81       	ldd	r25, Y+5	; 0x05
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	71 f0       	breq	.+28     	; 0x1224 <GPIO_writePin+0x68>
    1208:	bc c0       	rjmp	.+376    	; 0x1382 <GPIO_writePin+0x1c6>
    120a:	2c 81       	ldd	r18, Y+4	; 0x04
    120c:	3d 81       	ldd	r19, Y+5	; 0x05
    120e:	22 30       	cpi	r18, 0x02	; 2
    1210:	31 05       	cpc	r19, r1
    1212:	09 f4       	brne	.+2      	; 0x1216 <GPIO_writePin+0x5a>
    1214:	5f c0       	rjmp	.+190    	; 0x12d4 <GPIO_writePin+0x118>
    1216:	8c 81       	ldd	r24, Y+4	; 0x04
    1218:	9d 81       	ldd	r25, Y+5	; 0x05
    121a:	83 30       	cpi	r24, 0x03	; 3
    121c:	91 05       	cpc	r25, r1
    121e:	09 f4       	brne	.+2      	; 0x1222 <GPIO_writePin+0x66>
    1220:	85 c0       	rjmp	.+266    	; 0x132c <GPIO_writePin+0x170>
    1222:	af c0       	rjmp	.+350    	; 0x1382 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if( value == LOGIC_HIGH)
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	81 30       	cpi	r24, 0x01	; 1
    1228:	a1 f4       	brne	.+40     	; 0x1252 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    122a:	ab e3       	ldi	r26, 0x3B	; 59
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	eb e3       	ldi	r30, 0x3B	; 59
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	48 2f       	mov	r20, r24
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 2e       	mov	r0, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <GPIO_writePin+0x8c>
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	0a 94       	dec	r0
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <GPIO_writePin+0x88>
    124c:	84 2b       	or	r24, r20
    124e:	8c 93       	st	X, r24
    1250:	98 c0       	rjmp	.+304    	; 0x1382 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1252:	ab e3       	ldi	r26, 0x3B	; 59
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	eb e3       	ldi	r30, 0x3B	; 59
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	48 2f       	mov	r20, r24
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 2e       	mov	r0, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <GPIO_writePin+0xb4>
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	0a 94       	dec	r0
    1272:	e2 f7       	brpl	.-8      	; 0x126c <GPIO_writePin+0xb0>
    1274:	80 95       	com	r24
    1276:	84 23       	and	r24, r20
    1278:	8c 93       	st	X, r24
    127a:	83 c0       	rjmp	.+262    	; 0x1382 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if( value == LOGIC_HIGH)
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	81 30       	cpi	r24, 0x01	; 1
    1280:	a1 f4       	brne	.+40     	; 0x12aa <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1282:	a8 e3       	ldi	r26, 0x38	; 56
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e8 e3       	ldi	r30, 0x38	; 56
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	48 2f       	mov	r20, r24
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 2e       	mov	r0, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <GPIO_writePin+0xe4>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	0a 94       	dec	r0
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <GPIO_writePin+0xe0>
    12a4:	84 2b       	or	r24, r20
    12a6:	8c 93       	st	X, r24
    12a8:	6c c0       	rjmp	.+216    	; 0x1382 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    12aa:	a8 e3       	ldi	r26, 0x38	; 56
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e8 e3       	ldi	r30, 0x38	; 56
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	48 2f       	mov	r20, r24
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 2e       	mov	r0, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <GPIO_writePin+0x10c>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	0a 94       	dec	r0
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <GPIO_writePin+0x108>
    12cc:	80 95       	com	r24
    12ce:	84 23       	and	r24, r20
    12d0:	8c 93       	st	X, r24
    12d2:	57 c0       	rjmp	.+174    	; 0x1382 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if( value == LOGIC_HIGH)
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	a1 f4       	brne	.+40     	; 0x1302 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    12da:	a5 e3       	ldi	r26, 0x35	; 53
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e5 e3       	ldi	r30, 0x35	; 53
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	48 2f       	mov	r20, r24
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	02 2e       	mov	r0, r18
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <GPIO_writePin+0x13c>
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	0a 94       	dec	r0
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <GPIO_writePin+0x138>
    12fc:	84 2b       	or	r24, r20
    12fe:	8c 93       	st	X, r24
    1300:	40 c0       	rjmp	.+128    	; 0x1382 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1302:	a5 e3       	ldi	r26, 0x35	; 53
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e5 e3       	ldi	r30, 0x35	; 53
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	48 2f       	mov	r20, r24
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	02 2e       	mov	r0, r18
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <GPIO_writePin+0x164>
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	0a 94       	dec	r0
    1322:	e2 f7       	brpl	.-8      	; 0x131c <GPIO_writePin+0x160>
    1324:	80 95       	com	r24
    1326:	84 23       	and	r24, r20
    1328:	8c 93       	st	X, r24
    132a:	2b c0       	rjmp	.+86     	; 0x1382 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if( value == LOGIC_HIGH)
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	81 30       	cpi	r24, 0x01	; 1
    1330:	a1 f4       	brne	.+40     	; 0x135a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1332:	a2 e3       	ldi	r26, 0x32	; 50
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e2 e3       	ldi	r30, 0x32	; 50
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	48 2f       	mov	r20, r24
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	02 2e       	mov	r0, r18
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <GPIO_writePin+0x194>
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	0a 94       	dec	r0
    1352:	e2 f7       	brpl	.-8      	; 0x134c <GPIO_writePin+0x190>
    1354:	84 2b       	or	r24, r20
    1356:	8c 93       	st	X, r24
    1358:	14 c0       	rjmp	.+40     	; 0x1382 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    135a:	a2 e3       	ldi	r26, 0x32	; 50
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e2 e3       	ldi	r30, 0x32	; 50
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	48 2f       	mov	r20, r24
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	02 2e       	mov	r0, r18
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <GPIO_writePin+0x1bc>
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	0a 94       	dec	r0
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <GPIO_writePin+0x1b8>
    137c:	80 95       	com	r24
    137e:	84 23       	and	r24, r20
    1380:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	08 95       	ret

00001392 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num ,uint8 pin_num)
{
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	00 d0       	rcall	.+0      	; 0x1398 <GPIO_readPin+0x6>
    1398:	00 d0       	rcall	.+0      	; 0x139a <GPIO_readPin+0x8>
    139a:	0f 92       	push	r0
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	8a 83       	std	Y+2, r24	; 0x02
    13a2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value= LOGIC_LOW;
    13a4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if( (port_num>=NUM_OF_PORTs) || (pin_num>=NUM_PINS_PER_PORT))
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	84 30       	cpi	r24, 0x04	; 4
    13aa:	08 f0       	brcs	.+2      	; 0x13ae <GPIO_readPin+0x1c>
    13ac:	84 c0       	rjmp	.+264    	; 0x14b6 <GPIO_readPin+0x124>
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	88 30       	cpi	r24, 0x08	; 8
    13b2:	08 f0       	brcs	.+2      	; 0x13b6 <GPIO_readPin+0x24>
    13b4:	80 c0       	rjmp	.+256    	; 0x14b6 <GPIO_readPin+0x124>
	{
		/*Do Nothing*/
	}
	else
	{
		switch(port_num)
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	3d 83       	std	Y+5, r19	; 0x05
    13be:	2c 83       	std	Y+4, r18	; 0x04
    13c0:	4c 81       	ldd	r20, Y+4	; 0x04
    13c2:	5d 81       	ldd	r21, Y+5	; 0x05
    13c4:	41 30       	cpi	r20, 0x01	; 1
    13c6:	51 05       	cpc	r21, r1
    13c8:	79 f1       	breq	.+94     	; 0x1428 <GPIO_readPin+0x96>
    13ca:	8c 81       	ldd	r24, Y+4	; 0x04
    13cc:	9d 81       	ldd	r25, Y+5	; 0x05
    13ce:	82 30       	cpi	r24, 0x02	; 2
    13d0:	91 05       	cpc	r25, r1
    13d2:	34 f4       	brge	.+12     	; 0x13e0 <GPIO_readPin+0x4e>
    13d4:	2c 81       	ldd	r18, Y+4	; 0x04
    13d6:	3d 81       	ldd	r19, Y+5	; 0x05
    13d8:	21 15       	cp	r18, r1
    13da:	31 05       	cpc	r19, r1
    13dc:	69 f0       	breq	.+26     	; 0x13f8 <GPIO_readPin+0x66>
    13de:	6b c0       	rjmp	.+214    	; 0x14b6 <GPIO_readPin+0x124>
    13e0:	4c 81       	ldd	r20, Y+4	; 0x04
    13e2:	5d 81       	ldd	r21, Y+5	; 0x05
    13e4:	42 30       	cpi	r20, 0x02	; 2
    13e6:	51 05       	cpc	r21, r1
    13e8:	b9 f1       	breq	.+110    	; 0x1458 <GPIO_readPin+0xc6>
    13ea:	8c 81       	ldd	r24, Y+4	; 0x04
    13ec:	9d 81       	ldd	r25, Y+5	; 0x05
    13ee:	83 30       	cpi	r24, 0x03	; 3
    13f0:	91 05       	cpc	r25, r1
    13f2:	09 f4       	brne	.+2      	; 0x13f6 <GPIO_readPin+0x64>
    13f4:	49 c0       	rjmp	.+146    	; 0x1488 <GPIO_readPin+0xf6>
    13f6:	5f c0       	rjmp	.+190    	; 0x14b6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PORTA,pin_num))
    13f8:	eb e3       	ldi	r30, 0x3B	; 59
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	88 2f       	mov	r24, r24
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	a9 01       	movw	r20, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <GPIO_readPin+0x7e>
    140c:	55 95       	asr	r21
    140e:	47 95       	ror	r20
    1410:	8a 95       	dec	r24
    1412:	e2 f7       	brpl	.-8      	; 0x140c <GPIO_readPin+0x7a>
    1414:	ca 01       	movw	r24, r20
    1416:	81 70       	andi	r24, 0x01	; 1
    1418:	90 70       	andi	r25, 0x00	; 0
    141a:	88 23       	and	r24, r24
    141c:	19 f0       	breq	.+6      	; 0x1424 <GPIO_readPin+0x92>
			{
				pin_value= LOGIC_HIGH;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	89 83       	std	Y+1, r24	; 0x01
    1422:	49 c0       	rjmp	.+146    	; 0x14b6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value= LOGIC_LOW;
    1424:	19 82       	std	Y+1, r1	; 0x01
    1426:	47 c0       	rjmp	.+142    	; 0x14b6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PORTB,pin_num))
    1428:	e8 e3       	ldi	r30, 0x38	; 56
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	88 2f       	mov	r24, r24
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	a9 01       	movw	r20, r18
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <GPIO_readPin+0xae>
    143c:	55 95       	asr	r21
    143e:	47 95       	ror	r20
    1440:	8a 95       	dec	r24
    1442:	e2 f7       	brpl	.-8      	; 0x143c <GPIO_readPin+0xaa>
    1444:	ca 01       	movw	r24, r20
    1446:	81 70       	andi	r24, 0x01	; 1
    1448:	90 70       	andi	r25, 0x00	; 0
    144a:	88 23       	and	r24, r24
    144c:	19 f0       	breq	.+6      	; 0x1454 <GPIO_readPin+0xc2>
			{
				pin_value= LOGIC_HIGH;
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	31 c0       	rjmp	.+98     	; 0x14b6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value= LOGIC_LOW;
    1454:	19 82       	std	Y+1, r1	; 0x01
    1456:	2f c0       	rjmp	.+94     	; 0x14b6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PORTC,pin_num))
    1458:	e5 e3       	ldi	r30, 0x35	; 53
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	88 2f       	mov	r24, r24
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	a9 01       	movw	r20, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <GPIO_readPin+0xde>
    146c:	55 95       	asr	r21
    146e:	47 95       	ror	r20
    1470:	8a 95       	dec	r24
    1472:	e2 f7       	brpl	.-8      	; 0x146c <GPIO_readPin+0xda>
    1474:	ca 01       	movw	r24, r20
    1476:	81 70       	andi	r24, 0x01	; 1
    1478:	90 70       	andi	r25, 0x00	; 0
    147a:	88 23       	and	r24, r24
    147c:	19 f0       	breq	.+6      	; 0x1484 <GPIO_readPin+0xf2>
			{
				pin_value= LOGIC_HIGH;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	19 c0       	rjmp	.+50     	; 0x14b6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value= LOGIC_LOW;
    1484:	19 82       	std	Y+1, r1	; 0x01
    1486:	17 c0       	rjmp	.+46     	; 0x14b6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PORTD,pin_num))
    1488:	e2 e3       	ldi	r30, 0x32	; 50
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	88 2f       	mov	r24, r24
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a9 01       	movw	r20, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <GPIO_readPin+0x10e>
    149c:	55 95       	asr	r21
    149e:	47 95       	ror	r20
    14a0:	8a 95       	dec	r24
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <GPIO_readPin+0x10a>
    14a4:	ca 01       	movw	r24, r20
    14a6:	81 70       	andi	r24, 0x01	; 1
    14a8:	90 70       	andi	r25, 0x00	; 0
    14aa:	88 23       	and	r24, r24
    14ac:	19 f0       	breq	.+6      	; 0x14b4 <GPIO_readPin+0x122>
			{
				pin_value= LOGIC_HIGH;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	01 c0       	rjmp	.+2      	; 0x14b6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value= LOGIC_LOW;
    14b4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, uint8 direction)
{
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	00 d0       	rcall	.+0      	; 0x14ce <GPIO_setupPortDirection+0x6>
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <GPIO_setupPortDirection+0x8>
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if port_num Greater Than PORTS of MC
	 */
	if(port_num>=NUM_OF_PORTs)
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	84 30       	cpi	r24, 0x04	; 4
    14dc:	90 f5       	brcc	.+100    	; 0x1542 <GPIO_setupPortDirection+0x7a>
	{
		/* Do NoThing*/
	}
	else
	{
		switch(port_num)
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	3c 83       	std	Y+4, r19	; 0x04
    14e6:	2b 83       	std	Y+3, r18	; 0x03
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	81 30       	cpi	r24, 0x01	; 1
    14ee:	91 05       	cpc	r25, r1
    14f0:	d1 f0       	breq	.+52     	; 0x1526 <GPIO_setupPortDirection+0x5e>
    14f2:	2b 81       	ldd	r18, Y+3	; 0x03
    14f4:	3c 81       	ldd	r19, Y+4	; 0x04
    14f6:	22 30       	cpi	r18, 0x02	; 2
    14f8:	31 05       	cpc	r19, r1
    14fa:	2c f4       	brge	.+10     	; 0x1506 <GPIO_setupPortDirection+0x3e>
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	61 f0       	breq	.+24     	; 0x151c <GPIO_setupPortDirection+0x54>
    1504:	1e c0       	rjmp	.+60     	; 0x1542 <GPIO_setupPortDirection+0x7a>
    1506:	2b 81       	ldd	r18, Y+3	; 0x03
    1508:	3c 81       	ldd	r19, Y+4	; 0x04
    150a:	22 30       	cpi	r18, 0x02	; 2
    150c:	31 05       	cpc	r19, r1
    150e:	81 f0       	breq	.+32     	; 0x1530 <GPIO_setupPortDirection+0x68>
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	83 30       	cpi	r24, 0x03	; 3
    1516:	91 05       	cpc	r25, r1
    1518:	81 f0       	breq	.+32     	; 0x153a <GPIO_setupPortDirection+0x72>
    151a:	13 c0       	rjmp	.+38     	; 0x1542 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    151c:	ea e3       	ldi	r30, 0x3A	; 58
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	80 83       	st	Z, r24
    1524:	0e c0       	rjmp	.+28     	; 0x1542 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1526:	e7 e3       	ldi	r30, 0x37	; 55
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	80 83       	st	Z, r24
    152e:	09 c0       	rjmp	.+18     	; 0x1542 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC= direction;
    1530:	e4 e3       	ldi	r30, 0x34	; 52
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	80 83       	st	Z, r24
    1538:	04 c0       	rjmp	.+8      	; 0x1542 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    153a:	e1 e3       	ldi	r30, 0x31	; 49
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	80 83       	st	Z, r24
			break;
		}
	}
}
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	00 d0       	rcall	.+0      	; 0x1556 <GPIO_writePort+0x6>
    1556:	00 d0       	rcall	.+0      	; 0x1558 <GPIO_writePort+0x8>
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
    155c:	89 83       	std	Y+1, r24	; 0x01
    155e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if port_num Greater Than PORTS of MC
	 */
	if(port_num>=NUM_OF_PORTs)
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	84 30       	cpi	r24, 0x04	; 4
    1564:	90 f5       	brcc	.+100    	; 0x15ca <GPIO_writePort+0x7a>
	{
		/* Do NoThing*/
	}
	else
	{
		switch(port_num)
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	3c 83       	std	Y+4, r19	; 0x04
    156e:	2b 83       	std	Y+3, r18	; 0x03
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	91 05       	cpc	r25, r1
    1578:	d1 f0       	breq	.+52     	; 0x15ae <GPIO_writePort+0x5e>
    157a:	2b 81       	ldd	r18, Y+3	; 0x03
    157c:	3c 81       	ldd	r19, Y+4	; 0x04
    157e:	22 30       	cpi	r18, 0x02	; 2
    1580:	31 05       	cpc	r19, r1
    1582:	2c f4       	brge	.+10     	; 0x158e <GPIO_writePort+0x3e>
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	9c 81       	ldd	r25, Y+4	; 0x04
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	61 f0       	breq	.+24     	; 0x15a4 <GPIO_writePort+0x54>
    158c:	1e c0       	rjmp	.+60     	; 0x15ca <GPIO_writePort+0x7a>
    158e:	2b 81       	ldd	r18, Y+3	; 0x03
    1590:	3c 81       	ldd	r19, Y+4	; 0x04
    1592:	22 30       	cpi	r18, 0x02	; 2
    1594:	31 05       	cpc	r19, r1
    1596:	81 f0       	breq	.+32     	; 0x15b8 <GPIO_writePort+0x68>
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	9c 81       	ldd	r25, Y+4	; 0x04
    159c:	83 30       	cpi	r24, 0x03	; 3
    159e:	91 05       	cpc	r25, r1
    15a0:	81 f0       	breq	.+32     	; 0x15c2 <GPIO_writePort+0x72>
    15a2:	13 c0       	rjmp	.+38     	; 0x15ca <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA=value;
    15a4:	eb e3       	ldi	r30, 0x3B	; 59
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	80 83       	st	Z, r24
    15ac:	0e c0       	rjmp	.+28     	; 0x15ca <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    15ae:	e8 e3       	ldi	r30, 0x38	; 56
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	80 83       	st	Z, r24
    15b6:	09 c0       	rjmp	.+18     	; 0x15ca <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    15b8:	e5 e3       	ldi	r30, 0x35	; 53
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	80 83       	st	Z, r24
    15c0:	04 c0       	rjmp	.+8      	; 0x15ca <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    15c2:	e2 e3       	ldi	r30, 0x32	; 50
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	80 83       	st	Z, r24
			break;
		}
	}
}
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	00 d0       	rcall	.+0      	; 0x15de <GPIO_readPort+0x6>
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <GPIO_readPort+0x8>
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value=LOGIC_LOW;
    15e6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if port_num Greater Than PORTS of MC
	 */
	if(port_num>=NUM_OF_PORTs)
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	84 30       	cpi	r24, 0x04	; 4
    15ec:	90 f5       	brcc	.+100    	; 0x1652 <GPIO_readPort+0x7a>
	{
		/* Do NoThing*/
	}
	else
	{
		switch(port_num)
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	3c 83       	std	Y+4, r19	; 0x04
    15f6:	2b 83       	std	Y+3, r18	; 0x03
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	9c 81       	ldd	r25, Y+4	; 0x04
    15fc:	81 30       	cpi	r24, 0x01	; 1
    15fe:	91 05       	cpc	r25, r1
    1600:	d1 f0       	breq	.+52     	; 0x1636 <GPIO_readPort+0x5e>
    1602:	2b 81       	ldd	r18, Y+3	; 0x03
    1604:	3c 81       	ldd	r19, Y+4	; 0x04
    1606:	22 30       	cpi	r18, 0x02	; 2
    1608:	31 05       	cpc	r19, r1
    160a:	2c f4       	brge	.+10     	; 0x1616 <GPIO_readPort+0x3e>
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	9c 81       	ldd	r25, Y+4	; 0x04
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	61 f0       	breq	.+24     	; 0x162c <GPIO_readPort+0x54>
    1614:	1e c0       	rjmp	.+60     	; 0x1652 <GPIO_readPort+0x7a>
    1616:	2b 81       	ldd	r18, Y+3	; 0x03
    1618:	3c 81       	ldd	r19, Y+4	; 0x04
    161a:	22 30       	cpi	r18, 0x02	; 2
    161c:	31 05       	cpc	r19, r1
    161e:	81 f0       	breq	.+32     	; 0x1640 <GPIO_readPort+0x68>
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	9c 81       	ldd	r25, Y+4	; 0x04
    1624:	83 30       	cpi	r24, 0x03	; 3
    1626:	91 05       	cpc	r25, r1
    1628:	81 f0       	breq	.+32     	; 0x164a <GPIO_readPort+0x72>
    162a:	13 c0       	rjmp	.+38     	; 0x1652 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			port_value= PINA;			/* PIN : READ Registers*/
    162c:	e9 e3       	ldi	r30, 0x39	; 57
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	0e c0       	rjmp	.+28     	; 0x1652 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			port_value= PINB;
    1636:	e6 e3       	ldi	r30, 0x36	; 54
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	09 c0       	rjmp	.+18     	; 0x1652 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			port_value = PINC;
    1640:	e3 e3       	ldi	r30, 0x33	; 51
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	89 83       	std	Y+1, r24	; 0x01
    1648:	04 c0       	rjmp	.+8      	; 0x1652 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			port_value= PIND;
    164a:	e0 e3       	ldi	r30, 0x30	; 48
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return port_value;
    1652:	89 81       	ldd	r24, Y+1	; 0x01
}
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <LCD_init>:
 * Function Name: LCD_init()
 * Description:
 * 	Initialization for LCD Driver
 */
void LCD_init(void)
{
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	2e 97       	sbiw	r28, 0x0e	; 14
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
	/* Make both Rs and E  output pins*/
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,OUTPUT_PIN);
    1676:	83 e0       	ldi	r24, 0x03	; 3
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	41 e0       	ldi	r20, 0x01	; 1
    167c:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,OUTPUT_PIN);
    1680:	83 e0       	ldi	r24, 0x03	; 3
    1682:	62 e0       	ldi	r22, 0x02	; 2
    1684:	41 e0       	ldi	r20, 0x01	; 1
    1686:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <GPIO_setupPinDirection>
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	a0 ea       	ldi	r26, 0xA0	; 160
    1690:	b1 e4       	ldi	r27, 0x41	; 65
    1692:	8b 87       	std	Y+11, r24	; 0x0b
    1694:	9c 87       	std	Y+12, r25	; 0x0c
    1696:	ad 87       	std	Y+13, r26	; 0x0d
    1698:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169a:	6b 85       	ldd	r22, Y+11	; 0x0b
    169c:	7c 85       	ldd	r23, Y+12	; 0x0c
    169e:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	4a e7       	ldi	r20, 0x7A	; 122
    16a8:	53 e4       	ldi	r21, 0x43	; 67
    16aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	8f 83       	std	Y+7, r24	; 0x07
    16b4:	98 87       	std	Y+8, r25	; 0x08
    16b6:	a9 87       	std	Y+9, r26	; 0x09
    16b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ba:	6f 81       	ldd	r22, Y+7	; 0x07
    16bc:	78 85       	ldd	r23, Y+8	; 0x08
    16be:	89 85       	ldd	r24, Y+9	; 0x09
    16c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	40 e8       	ldi	r20, 0x80	; 128
    16c8:	5f e3       	ldi	r21, 0x3F	; 63
    16ca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16ce:	88 23       	and	r24, r24
    16d0:	2c f4       	brge	.+10     	; 0x16dc <LCD_init+0x7a>
		__ticks = 1;
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	9e 83       	std	Y+6, r25	; 0x06
    16d8:	8d 83       	std	Y+5, r24	; 0x05
    16da:	3f c0       	rjmp	.+126    	; 0x175a <LCD_init+0xf8>
	else if (__tmp > 65535)
    16dc:	6f 81       	ldd	r22, Y+7	; 0x07
    16de:	78 85       	ldd	r23, Y+8	; 0x08
    16e0:	89 85       	ldd	r24, Y+9	; 0x09
    16e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	3f ef       	ldi	r19, 0xFF	; 255
    16e8:	4f e7       	ldi	r20, 0x7F	; 127
    16ea:	57 e4       	ldi	r21, 0x47	; 71
    16ec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16f0:	18 16       	cp	r1, r24
    16f2:	4c f5       	brge	.+82     	; 0x1746 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	40 e2       	ldi	r20, 0x20	; 32
    1702:	51 e4       	ldi	r21, 0x41	; 65
    1704:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	bc 01       	movw	r22, r24
    170e:	cd 01       	movw	r24, r26
    1710:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	9e 83       	std	Y+6, r25	; 0x06
    171a:	8d 83       	std	Y+5, r24	; 0x05
    171c:	0f c0       	rjmp	.+30     	; 0x173c <LCD_init+0xda>
    171e:	89 e1       	ldi	r24, 0x19	; 25
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	9c 83       	std	Y+4, r25	; 0x04
    1724:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	9c 81       	ldd	r25, Y+4	; 0x04
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	f1 f7       	brne	.-4      	; 0x172a <LCD_init+0xc8>
    172e:	9c 83       	std	Y+4, r25	; 0x04
    1730:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1732:	8d 81       	ldd	r24, Y+5	; 0x05
    1734:	9e 81       	ldd	r25, Y+6	; 0x06
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	9e 83       	std	Y+6, r25	; 0x06
    173a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    173c:	8d 81       	ldd	r24, Y+5	; 0x05
    173e:	9e 81       	ldd	r25, Y+6	; 0x06
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	69 f7       	brne	.-38     	; 0x171e <LCD_init+0xbc>
    1744:	14 c0       	rjmp	.+40     	; 0x176e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1746:	6f 81       	ldd	r22, Y+7	; 0x07
    1748:	78 85       	ldd	r23, Y+8	; 0x08
    174a:	89 85       	ldd	r24, Y+9	; 0x09
    174c:	9a 85       	ldd	r25, Y+10	; 0x0a
    174e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	9e 83       	std	Y+6, r25	; 0x06
    1758:	8d 83       	std	Y+5, r24	; 0x05
    175a:	8d 81       	ldd	r24, Y+5	; 0x05
    175c:	9e 81       	ldd	r25, Y+6	; 0x06
    175e:	9a 83       	std	Y+2, r25	; 0x02
    1760:	89 83       	std	Y+1, r24	; 0x01
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	9a 81       	ldd	r25, Y+2	; 0x02
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	f1 f7       	brne	.-4      	; 0x1766 <LCD_init+0x104>
    176a:	9a 83       	std	Y+2, r25	; 0x02
    176c:	89 83       	std	Y+1, r24	; 0x01
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#endif
#ifndef LCD_FOUR_BIT_MODE
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,OUTPUT_PORT);
    176e:	82 e0       	ldi	r24, 0x02	; 2
    1770:	6f ef       	ldi	r22, 0xFF	; 255
    1772:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1776:	88 e3       	ldi	r24, 0x38	; 56
    1778:	0e 94 cd 0b 	call	0x179a	; 0x179a <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    177c:	8c e0       	ldi	r24, 0x0C	; 12
    177e:	0e 94 cd 0b 	call	0x179a	; 0x179a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	0e 94 cd 0b 	call	0x179a	; 0x179a <LCD_sendCommand>



}
    1788:	2e 96       	adiw	r28, 0x0e	; 14
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	08 95       	ret

0000179a <LCD_sendCommand>:
 * Function Name: LCD_sendCommand()
 * Description:
 * 	Send a Command To LCD Through Data Path accroding to Data Sheet
 */
void LCD_sendCommand(uint8 command)
{
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	e9 97       	sbiw	r28, 0x39	; 57
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	f8 94       	cli
    17a8:	de bf       	out	0x3e, r29	; 62
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	cd bf       	out	0x3d, r28	; 61
    17ae:	89 af       	std	Y+57, r24	; 0x39
	/* Make RS=*/
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID ,LOGIC_LOW);
    17b0:	83 e0       	ldi	r24, 0x03	; 3
    17b2:	60 e0       	ldi	r22, 0x00	; 0
    17b4:	40 e0       	ldi	r20, 0x00	; 0
    17b6:	0e 94 de 08 	call	0x11bc	; 0x11bc <GPIO_writePin>
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	a0 e8       	ldi	r26, 0x80	; 128
    17c0:	bf e3       	ldi	r27, 0x3F	; 63
    17c2:	8d ab       	std	Y+53, r24	; 0x35
    17c4:	9e ab       	std	Y+54, r25	; 0x36
    17c6:	af ab       	std	Y+55, r26	; 0x37
    17c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ca:	6d a9       	ldd	r22, Y+53	; 0x35
    17cc:	7e a9       	ldd	r23, Y+54	; 0x36
    17ce:	8f a9       	ldd	r24, Y+55	; 0x37
    17d0:	98 ad       	ldd	r25, Y+56	; 0x38
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	4a e7       	ldi	r20, 0x7A	; 122
    17d8:	53 e4       	ldi	r21, 0x43	; 67
    17da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	89 ab       	std	Y+49, r24	; 0x31
    17e4:	9a ab       	std	Y+50, r25	; 0x32
    17e6:	ab ab       	std	Y+51, r26	; 0x33
    17e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17ea:	69 a9       	ldd	r22, Y+49	; 0x31
    17ec:	7a a9       	ldd	r23, Y+50	; 0x32
    17ee:	8b a9       	ldd	r24, Y+51	; 0x33
    17f0:	9c a9       	ldd	r25, Y+52	; 0x34
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e8       	ldi	r20, 0x80	; 128
    17f8:	5f e3       	ldi	r21, 0x3F	; 63
    17fa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17fe:	88 23       	and	r24, r24
    1800:	2c f4       	brge	.+10     	; 0x180c <LCD_sendCommand+0x72>
		__ticks = 1;
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	98 ab       	std	Y+48, r25	; 0x30
    1808:	8f a7       	std	Y+47, r24	; 0x2f
    180a:	3f c0       	rjmp	.+126    	; 0x188a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    180c:	69 a9       	ldd	r22, Y+49	; 0x31
    180e:	7a a9       	ldd	r23, Y+50	; 0x32
    1810:	8b a9       	ldd	r24, Y+51	; 0x33
    1812:	9c a9       	ldd	r25, Y+52	; 0x34
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	3f ef       	ldi	r19, 0xFF	; 255
    1818:	4f e7       	ldi	r20, 0x7F	; 127
    181a:	57 e4       	ldi	r21, 0x47	; 71
    181c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1820:	18 16       	cp	r1, r24
    1822:	4c f5       	brge	.+82     	; 0x1876 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1824:	6d a9       	ldd	r22, Y+53	; 0x35
    1826:	7e a9       	ldd	r23, Y+54	; 0x36
    1828:	8f a9       	ldd	r24, Y+55	; 0x37
    182a:	98 ad       	ldd	r25, Y+56	; 0x38
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 e2       	ldi	r20, 0x20	; 32
    1832:	51 e4       	ldi	r21, 0x41	; 65
    1834:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	bc 01       	movw	r22, r24
    183e:	cd 01       	movw	r24, r26
    1840:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	98 ab       	std	Y+48, r25	; 0x30
    184a:	8f a7       	std	Y+47, r24	; 0x2f
    184c:	0f c0       	rjmp	.+30     	; 0x186c <LCD_sendCommand+0xd2>
    184e:	89 e1       	ldi	r24, 0x19	; 25
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	9e a7       	std	Y+46, r25	; 0x2e
    1854:	8d a7       	std	Y+45, r24	; 0x2d
    1856:	8d a5       	ldd	r24, Y+45	; 0x2d
    1858:	9e a5       	ldd	r25, Y+46	; 0x2e
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	f1 f7       	brne	.-4      	; 0x185a <LCD_sendCommand+0xc0>
    185e:	9e a7       	std	Y+46, r25	; 0x2e
    1860:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1862:	8f a5       	ldd	r24, Y+47	; 0x2f
    1864:	98 a9       	ldd	r25, Y+48	; 0x30
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	98 ab       	std	Y+48, r25	; 0x30
    186a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186c:	8f a5       	ldd	r24, Y+47	; 0x2f
    186e:	98 a9       	ldd	r25, Y+48	; 0x30
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	69 f7       	brne	.-38     	; 0x184e <LCD_sendCommand+0xb4>
    1874:	14 c0       	rjmp	.+40     	; 0x189e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1876:	69 a9       	ldd	r22, Y+49	; 0x31
    1878:	7a a9       	ldd	r23, Y+50	; 0x32
    187a:	8b a9       	ldd	r24, Y+51	; 0x33
    187c:	9c a9       	ldd	r25, Y+52	; 0x34
    187e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	98 ab       	std	Y+48, r25	; 0x30
    1888:	8f a7       	std	Y+47, r24	; 0x2f
    188a:	8f a5       	ldd	r24, Y+47	; 0x2f
    188c:	98 a9       	ldd	r25, Y+48	; 0x30
    188e:	9c a7       	std	Y+44, r25	; 0x2c
    1890:	8b a7       	std	Y+43, r24	; 0x2b
    1892:	8b a5       	ldd	r24, Y+43	; 0x2b
    1894:	9c a5       	ldd	r25, Y+44	; 0x2c
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <LCD_sendCommand+0xfc>
    189a:	9c a7       	std	Y+44, r25	; 0x2c
    189c:	8b a7       	std	Y+43, r24	; 0x2b
	/* From AC Characteristic of LCD tas must delay by 50 nSec*/
	_delay_ms(1);
	/*Make Enable=1*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID ,LOGIC_HIGH);
    189e:	83 e0       	ldi	r24, 0x03	; 3
    18a0:	62 e0       	ldi	r22, 0x02	; 2
    18a2:	41 e0       	ldi	r20, 0x01	; 1
    18a4:	0e 94 de 08 	call	0x11bc	; 0x11bc <GPIO_writePin>
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	a0 e8       	ldi	r26, 0x80	; 128
    18ae:	bf e3       	ldi	r27, 0x3F	; 63
    18b0:	8f a3       	std	Y+39, r24	; 0x27
    18b2:	98 a7       	std	Y+40, r25	; 0x28
    18b4:	a9 a7       	std	Y+41, r26	; 0x29
    18b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b8:	6f a1       	ldd	r22, Y+39	; 0x27
    18ba:	78 a5       	ldd	r23, Y+40	; 0x28
    18bc:	89 a5       	ldd	r24, Y+41	; 0x29
    18be:	9a a5       	ldd	r25, Y+42	; 0x2a
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	4a e7       	ldi	r20, 0x7A	; 122
    18c6:	53 e4       	ldi	r21, 0x43	; 67
    18c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	8b a3       	std	Y+35, r24	; 0x23
    18d2:	9c a3       	std	Y+36, r25	; 0x24
    18d4:	ad a3       	std	Y+37, r26	; 0x25
    18d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18d8:	6b a1       	ldd	r22, Y+35	; 0x23
    18da:	7c a1       	ldd	r23, Y+36	; 0x24
    18dc:	8d a1       	ldd	r24, Y+37	; 0x25
    18de:	9e a1       	ldd	r25, Y+38	; 0x26
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	40 e8       	ldi	r20, 0x80	; 128
    18e6:	5f e3       	ldi	r21, 0x3F	; 63
    18e8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18ec:	88 23       	and	r24, r24
    18ee:	2c f4       	brge	.+10     	; 0x18fa <LCD_sendCommand+0x160>
		__ticks = 1;
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	9a a3       	std	Y+34, r25	; 0x22
    18f6:	89 a3       	std	Y+33, r24	; 0x21
    18f8:	3f c0       	rjmp	.+126    	; 0x1978 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    18fa:	6b a1       	ldd	r22, Y+35	; 0x23
    18fc:	7c a1       	ldd	r23, Y+36	; 0x24
    18fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1900:	9e a1       	ldd	r25, Y+38	; 0x26
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	3f ef       	ldi	r19, 0xFF	; 255
    1906:	4f e7       	ldi	r20, 0x7F	; 127
    1908:	57 e4       	ldi	r21, 0x47	; 71
    190a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    190e:	18 16       	cp	r1, r24
    1910:	4c f5       	brge	.+82     	; 0x1964 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1912:	6f a1       	ldd	r22, Y+39	; 0x27
    1914:	78 a5       	ldd	r23, Y+40	; 0x28
    1916:	89 a5       	ldd	r24, Y+41	; 0x29
    1918:	9a a5       	ldd	r25, Y+42	; 0x2a
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	40 e2       	ldi	r20, 0x20	; 32
    1920:	51 e4       	ldi	r21, 0x41	; 65
    1922:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	bc 01       	movw	r22, r24
    192c:	cd 01       	movw	r24, r26
    192e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	9a a3       	std	Y+34, r25	; 0x22
    1938:	89 a3       	std	Y+33, r24	; 0x21
    193a:	0f c0       	rjmp	.+30     	; 0x195a <LCD_sendCommand+0x1c0>
    193c:	89 e1       	ldi	r24, 0x19	; 25
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	98 a3       	std	Y+32, r25	; 0x20
    1942:	8f 8f       	std	Y+31, r24	; 0x1f
    1944:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1946:	98 a1       	ldd	r25, Y+32	; 0x20
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <LCD_sendCommand+0x1ae>
    194c:	98 a3       	std	Y+32, r25	; 0x20
    194e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1950:	89 a1       	ldd	r24, Y+33	; 0x21
    1952:	9a a1       	ldd	r25, Y+34	; 0x22
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	9a a3       	std	Y+34, r25	; 0x22
    1958:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    195a:	89 a1       	ldd	r24, Y+33	; 0x21
    195c:	9a a1       	ldd	r25, Y+34	; 0x22
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	69 f7       	brne	.-38     	; 0x193c <LCD_sendCommand+0x1a2>
    1962:	14 c0       	rjmp	.+40     	; 0x198c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1964:	6b a1       	ldd	r22, Y+35	; 0x23
    1966:	7c a1       	ldd	r23, Y+36	; 0x24
    1968:	8d a1       	ldd	r24, Y+37	; 0x25
    196a:	9e a1       	ldd	r25, Y+38	; 0x26
    196c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	9a a3       	std	Y+34, r25	; 0x22
    1976:	89 a3       	std	Y+33, r24	; 0x21
    1978:	89 a1       	ldd	r24, Y+33	; 0x21
    197a:	9a a1       	ldd	r25, Y+34	; 0x22
    197c:	9e 8f       	std	Y+30, r25	; 0x1e
    197e:	8d 8f       	std	Y+29, r24	; 0x1d
    1980:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1982:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <LCD_sendCommand+0x1ea>
    1988:	9e 8f       	std	Y+30, r25	; 0x1e
    198a:	8d 8f       	std	Y+29, r24	; 0x1d
	/* From AC Characteristic of LCD  must delay (tpw-tdsw) by 190 nSec*/
	_delay_ms(1);
	/* Send Command*/
#ifndef LCD_FOUR_BIT_MODE
	GPIO_writePort(LCD_DATA_PORT_ID,command);
    198c:	82 e0       	ldi	r24, 0x02	; 2
    198e:	69 ad       	ldd	r22, Y+57	; 0x39
    1990:	0e 94 a8 0a 	call	0x1550	; 0x1550 <GPIO_writePort>
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	a0 e8       	ldi	r26, 0x80	; 128
    199a:	bf e3       	ldi	r27, 0x3F	; 63
    199c:	89 8f       	std	Y+25, r24	; 0x19
    199e:	9a 8f       	std	Y+26, r25	; 0x1a
    19a0:	ab 8f       	std	Y+27, r26	; 0x1b
    19a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a4:	69 8d       	ldd	r22, Y+25	; 0x19
    19a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	4a e7       	ldi	r20, 0x7A	; 122
    19b2:	53 e4       	ldi	r21, 0x43	; 67
    19b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	8d 8b       	std	Y+21, r24	; 0x15
    19be:	9e 8b       	std	Y+22, r25	; 0x16
    19c0:	af 8b       	std	Y+23, r26	; 0x17
    19c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19c4:	6d 89       	ldd	r22, Y+21	; 0x15
    19c6:	7e 89       	ldd	r23, Y+22	; 0x16
    19c8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ca:	98 8d       	ldd	r25, Y+24	; 0x18
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	40 e8       	ldi	r20, 0x80	; 128
    19d2:	5f e3       	ldi	r21, 0x3F	; 63
    19d4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19d8:	88 23       	and	r24, r24
    19da:	2c f4       	brge	.+10     	; 0x19e6 <LCD_sendCommand+0x24c>
		__ticks = 1;
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	9c 8b       	std	Y+20, r25	; 0x14
    19e2:	8b 8b       	std	Y+19, r24	; 0x13
    19e4:	3f c0       	rjmp	.+126    	; 0x1a64 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    19e6:	6d 89       	ldd	r22, Y+21	; 0x15
    19e8:	7e 89       	ldd	r23, Y+22	; 0x16
    19ea:	8f 89       	ldd	r24, Y+23	; 0x17
    19ec:	98 8d       	ldd	r25, Y+24	; 0x18
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	3f ef       	ldi	r19, 0xFF	; 255
    19f2:	4f e7       	ldi	r20, 0x7F	; 127
    19f4:	57 e4       	ldi	r21, 0x47	; 71
    19f6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19fa:	18 16       	cp	r1, r24
    19fc:	4c f5       	brge	.+82     	; 0x1a50 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fe:	69 8d       	ldd	r22, Y+25	; 0x19
    1a00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	40 e2       	ldi	r20, 0x20	; 32
    1a0c:	51 e4       	ldi	r21, 0x41	; 65
    1a0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	bc 01       	movw	r22, r24
    1a18:	cd 01       	movw	r24, r26
    1a1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	9c 8b       	std	Y+20, r25	; 0x14
    1a24:	8b 8b       	std	Y+19, r24	; 0x13
    1a26:	0f c0       	rjmp	.+30     	; 0x1a46 <LCD_sendCommand+0x2ac>
    1a28:	89 e1       	ldi	r24, 0x19	; 25
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	9a 8b       	std	Y+18, r25	; 0x12
    1a2e:	89 8b       	std	Y+17, r24	; 0x11
    1a30:	89 89       	ldd	r24, Y+17	; 0x11
    1a32:	9a 89       	ldd	r25, Y+18	; 0x12
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <LCD_sendCommand+0x29a>
    1a38:	9a 8b       	std	Y+18, r25	; 0x12
    1a3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	9c 8b       	std	Y+20, r25	; 0x14
    1a44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a46:	8b 89       	ldd	r24, Y+19	; 0x13
    1a48:	9c 89       	ldd	r25, Y+20	; 0x14
    1a4a:	00 97       	sbiw	r24, 0x00	; 0
    1a4c:	69 f7       	brne	.-38     	; 0x1a28 <LCD_sendCommand+0x28e>
    1a4e:	14 c0       	rjmp	.+40     	; 0x1a78 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a50:	6d 89       	ldd	r22, Y+21	; 0x15
    1a52:	7e 89       	ldd	r23, Y+22	; 0x16
    1a54:	8f 89       	ldd	r24, Y+23	; 0x17
    1a56:	98 8d       	ldd	r25, Y+24	; 0x18
    1a58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	9c 8b       	std	Y+20, r25	; 0x14
    1a62:	8b 8b       	std	Y+19, r24	; 0x13
    1a64:	8b 89       	ldd	r24, Y+19	; 0x13
    1a66:	9c 89       	ldd	r25, Y+20	; 0x14
    1a68:	98 8b       	std	Y+16, r25	; 0x10
    1a6a:	8f 87       	std	Y+15, r24	; 0x0f
    1a6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a6e:	98 89       	ldd	r25, Y+16	; 0x10
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f7       	brne	.-4      	; 0x1a70 <LCD_sendCommand+0x2d6>
    1a74:	98 8b       	std	Y+16, r25	; 0x10
    1a76:	8f 87       	std	Y+15, r24	; 0x0f
	/* From AC Characteristic of LCD  must delay tdsw by 100 nSec*/
	_delay_ms(1);
	/* Return E=0*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID ,LOGIC_LOW);
    1a78:	83 e0       	ldi	r24, 0x03	; 3
    1a7a:	62 e0       	ldi	r22, 0x02	; 2
    1a7c:	40 e0       	ldi	r20, 0x00	; 0
    1a7e:	0e 94 de 08 	call	0x11bc	; 0x11bc <GPIO_writePin>
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	a0 e8       	ldi	r26, 0x80	; 128
    1a88:	bf e3       	ldi	r27, 0x3F	; 63
    1a8a:	8b 87       	std	Y+11, r24	; 0x0b
    1a8c:	9c 87       	std	Y+12, r25	; 0x0c
    1a8e:	ad 87       	std	Y+13, r26	; 0x0d
    1a90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	4a e7       	ldi	r20, 0x7A	; 122
    1aa0:	53 e4       	ldi	r21, 0x43	; 67
    1aa2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	8f 83       	std	Y+7, r24	; 0x07
    1aac:	98 87       	std	Y+8, r25	; 0x08
    1aae:	a9 87       	std	Y+9, r26	; 0x09
    1ab0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ab2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab4:	78 85       	ldd	r23, Y+8	; 0x08
    1ab6:	89 85       	ldd	r24, Y+9	; 0x09
    1ab8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	40 e8       	ldi	r20, 0x80	; 128
    1ac0:	5f e3       	ldi	r21, 0x3F	; 63
    1ac2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ac6:	88 23       	and	r24, r24
    1ac8:	2c f4       	brge	.+10     	; 0x1ad4 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	9e 83       	std	Y+6, r25	; 0x06
    1ad0:	8d 83       	std	Y+5, r24	; 0x05
    1ad2:	3f c0       	rjmp	.+126    	; 0x1b52 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1ad4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad6:	78 85       	ldd	r23, Y+8	; 0x08
    1ad8:	89 85       	ldd	r24, Y+9	; 0x09
    1ada:	9a 85       	ldd	r25, Y+10	; 0x0a
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	3f ef       	ldi	r19, 0xFF	; 255
    1ae0:	4f e7       	ldi	r20, 0x7F	; 127
    1ae2:	57 e4       	ldi	r21, 0x47	; 71
    1ae4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ae8:	18 16       	cp	r1, r24
    1aea:	4c f5       	brge	.+82     	; 0x1b3e <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1af0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1af2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e2       	ldi	r20, 0x20	; 32
    1afa:	51 e4       	ldi	r21, 0x41	; 65
    1afc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	bc 01       	movw	r22, r24
    1b06:	cd 01       	movw	r24, r26
    1b08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	9e 83       	std	Y+6, r25	; 0x06
    1b12:	8d 83       	std	Y+5, r24	; 0x05
    1b14:	0f c0       	rjmp	.+30     	; 0x1b34 <LCD_sendCommand+0x39a>
    1b16:	89 e1       	ldi	r24, 0x19	; 25
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	9c 83       	std	Y+4, r25	; 0x04
    1b1c:	8b 83       	std	Y+3, r24	; 0x03
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	9c 81       	ldd	r25, Y+4	; 0x04
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	f1 f7       	brne	.-4      	; 0x1b22 <LCD_sendCommand+0x388>
    1b26:	9c 83       	std	Y+4, r25	; 0x04
    1b28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	9e 83       	std	Y+6, r25	; 0x06
    1b32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b34:	8d 81       	ldd	r24, Y+5	; 0x05
    1b36:	9e 81       	ldd	r25, Y+6	; 0x06
    1b38:	00 97       	sbiw	r24, 0x00	; 0
    1b3a:	69 f7       	brne	.-38     	; 0x1b16 <LCD_sendCommand+0x37c>
    1b3c:	14 c0       	rjmp	.+40     	; 0x1b66 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b40:	78 85       	ldd	r23, Y+8	; 0x08
    1b42:	89 85       	ldd	r24, Y+9	; 0x09
    1b44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	9e 83       	std	Y+6, r25	; 0x06
    1b50:	8d 83       	std	Y+5, r24	; 0x05
    1b52:	8d 81       	ldd	r24, Y+5	; 0x05
    1b54:	9e 81       	ldd	r25, Y+6	; 0x06
    1b56:	9a 83       	std	Y+2, r25	; 0x02
    1b58:	89 83       	std	Y+1, r24	; 0x01
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	f1 f7       	brne	.-4      	; 0x1b5e <LCD_sendCommand+0x3c4>
    1b62:	9a 83       	std	Y+2, r25	; 0x02
    1b64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif

}
    1b66:	e9 96       	adiw	r28, 0x39	; 57
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	08 95       	ret

00001b78 <LCD_displayCharacter>:
 * Function Name: LCD_displayCharacter()
 * Description:
 * 	Display a Character  To LCD Through Data Path accroding to Data Sheet
 */
void LCD_displayCharacter(uint8 data)
{
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	e9 97       	sbiw	r28, 0x39	; 57
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	f8 94       	cli
    1b86:	de bf       	out	0x3e, r29	; 62
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	cd bf       	out	0x3d, r28	; 61
    1b8c:	89 af       	std	Y+57, r24	; 0x39
	/* Make RS=1*/
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID ,LOGIC_HIGH);
    1b8e:	83 e0       	ldi	r24, 0x03	; 3
    1b90:	60 e0       	ldi	r22, 0x00	; 0
    1b92:	41 e0       	ldi	r20, 0x01	; 1
    1b94:	0e 94 de 08 	call	0x11bc	; 0x11bc <GPIO_writePin>
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	a0 e8       	ldi	r26, 0x80	; 128
    1b9e:	bf e3       	ldi	r27, 0x3F	; 63
    1ba0:	8d ab       	std	Y+53, r24	; 0x35
    1ba2:	9e ab       	std	Y+54, r25	; 0x36
    1ba4:	af ab       	std	Y+55, r26	; 0x37
    1ba6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba8:	6d a9       	ldd	r22, Y+53	; 0x35
    1baa:	7e a9       	ldd	r23, Y+54	; 0x36
    1bac:	8f a9       	ldd	r24, Y+55	; 0x37
    1bae:	98 ad       	ldd	r25, Y+56	; 0x38
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	4a e7       	ldi	r20, 0x7A	; 122
    1bb6:	53 e4       	ldi	r21, 0x43	; 67
    1bb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	89 ab       	std	Y+49, r24	; 0x31
    1bc2:	9a ab       	std	Y+50, r25	; 0x32
    1bc4:	ab ab       	std	Y+51, r26	; 0x33
    1bc6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bc8:	69 a9       	ldd	r22, Y+49	; 0x31
    1bca:	7a a9       	ldd	r23, Y+50	; 0x32
    1bcc:	8b a9       	ldd	r24, Y+51	; 0x33
    1bce:	9c a9       	ldd	r25, Y+52	; 0x34
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e8       	ldi	r20, 0x80	; 128
    1bd6:	5f e3       	ldi	r21, 0x3F	; 63
    1bd8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bdc:	88 23       	and	r24, r24
    1bde:	2c f4       	brge	.+10     	; 0x1bea <LCD_displayCharacter+0x72>
		__ticks = 1;
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	98 ab       	std	Y+48, r25	; 0x30
    1be6:	8f a7       	std	Y+47, r24	; 0x2f
    1be8:	3f c0       	rjmp	.+126    	; 0x1c68 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1bea:	69 a9       	ldd	r22, Y+49	; 0x31
    1bec:	7a a9       	ldd	r23, Y+50	; 0x32
    1bee:	8b a9       	ldd	r24, Y+51	; 0x33
    1bf0:	9c a9       	ldd	r25, Y+52	; 0x34
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	3f ef       	ldi	r19, 0xFF	; 255
    1bf6:	4f e7       	ldi	r20, 0x7F	; 127
    1bf8:	57 e4       	ldi	r21, 0x47	; 71
    1bfa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bfe:	18 16       	cp	r1, r24
    1c00:	4c f5       	brge	.+82     	; 0x1c54 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c02:	6d a9       	ldd	r22, Y+53	; 0x35
    1c04:	7e a9       	ldd	r23, Y+54	; 0x36
    1c06:	8f a9       	ldd	r24, Y+55	; 0x37
    1c08:	98 ad       	ldd	r25, Y+56	; 0x38
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e2       	ldi	r20, 0x20	; 32
    1c10:	51 e4       	ldi	r21, 0x41	; 65
    1c12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	bc 01       	movw	r22, r24
    1c1c:	cd 01       	movw	r24, r26
    1c1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	98 ab       	std	Y+48, r25	; 0x30
    1c28:	8f a7       	std	Y+47, r24	; 0x2f
    1c2a:	0f c0       	rjmp	.+30     	; 0x1c4a <LCD_displayCharacter+0xd2>
    1c2c:	89 e1       	ldi	r24, 0x19	; 25
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	9e a7       	std	Y+46, r25	; 0x2e
    1c32:	8d a7       	std	Y+45, r24	; 0x2d
    1c34:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c36:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	f1 f7       	brne	.-4      	; 0x1c38 <LCD_displayCharacter+0xc0>
    1c3c:	9e a7       	std	Y+46, r25	; 0x2e
    1c3e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c42:	98 a9       	ldd	r25, Y+48	; 0x30
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	98 ab       	std	Y+48, r25	; 0x30
    1c48:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	69 f7       	brne	.-38     	; 0x1c2c <LCD_displayCharacter+0xb4>
    1c52:	14 c0       	rjmp	.+40     	; 0x1c7c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c54:	69 a9       	ldd	r22, Y+49	; 0x31
    1c56:	7a a9       	ldd	r23, Y+50	; 0x32
    1c58:	8b a9       	ldd	r24, Y+51	; 0x33
    1c5a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	98 ab       	std	Y+48, r25	; 0x30
    1c66:	8f a7       	std	Y+47, r24	; 0x2f
    1c68:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c6a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c6c:	9c a7       	std	Y+44, r25	; 0x2c
    1c6e:	8b a7       	std	Y+43, r24	; 0x2b
    1c70:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c72:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	f1 f7       	brne	.-4      	; 0x1c74 <LCD_displayCharacter+0xfc>
    1c78:	9c a7       	std	Y+44, r25	; 0x2c
    1c7a:	8b a7       	std	Y+43, r24	; 0x2b
	/* From AC Characteristic of LCD tas must delay by 50 nSec*/
	_delay_ms(1);
	/*Make Enable=1*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID ,LOGIC_HIGH);
    1c7c:	83 e0       	ldi	r24, 0x03	; 3
    1c7e:	62 e0       	ldi	r22, 0x02	; 2
    1c80:	41 e0       	ldi	r20, 0x01	; 1
    1c82:	0e 94 de 08 	call	0x11bc	; 0x11bc <GPIO_writePin>
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	a0 e8       	ldi	r26, 0x80	; 128
    1c8c:	bf e3       	ldi	r27, 0x3F	; 63
    1c8e:	8f a3       	std	Y+39, r24	; 0x27
    1c90:	98 a7       	std	Y+40, r25	; 0x28
    1c92:	a9 a7       	std	Y+41, r26	; 0x29
    1c94:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c96:	6f a1       	ldd	r22, Y+39	; 0x27
    1c98:	78 a5       	ldd	r23, Y+40	; 0x28
    1c9a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	4a e7       	ldi	r20, 0x7A	; 122
    1ca4:	53 e4       	ldi	r21, 0x43	; 67
    1ca6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	8b a3       	std	Y+35, r24	; 0x23
    1cb0:	9c a3       	std	Y+36, r25	; 0x24
    1cb2:	ad a3       	std	Y+37, r26	; 0x25
    1cb4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cb6:	6b a1       	ldd	r22, Y+35	; 0x23
    1cb8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cba:	8d a1       	ldd	r24, Y+37	; 0x25
    1cbc:	9e a1       	ldd	r25, Y+38	; 0x26
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	40 e8       	ldi	r20, 0x80	; 128
    1cc4:	5f e3       	ldi	r21, 0x3F	; 63
    1cc6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1cca:	88 23       	and	r24, r24
    1ccc:	2c f4       	brge	.+10     	; 0x1cd8 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	9a a3       	std	Y+34, r25	; 0x22
    1cd4:	89 a3       	std	Y+33, r24	; 0x21
    1cd6:	3f c0       	rjmp	.+126    	; 0x1d56 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1cd8:	6b a1       	ldd	r22, Y+35	; 0x23
    1cda:	7c a1       	ldd	r23, Y+36	; 0x24
    1cdc:	8d a1       	ldd	r24, Y+37	; 0x25
    1cde:	9e a1       	ldd	r25, Y+38	; 0x26
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	3f ef       	ldi	r19, 0xFF	; 255
    1ce4:	4f e7       	ldi	r20, 0x7F	; 127
    1ce6:	57 e4       	ldi	r21, 0x47	; 71
    1ce8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cec:	18 16       	cp	r1, r24
    1cee:	4c f5       	brge	.+82     	; 0x1d42 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf0:	6f a1       	ldd	r22, Y+39	; 0x27
    1cf2:	78 a5       	ldd	r23, Y+40	; 0x28
    1cf4:	89 a5       	ldd	r24, Y+41	; 0x29
    1cf6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	40 e2       	ldi	r20, 0x20	; 32
    1cfe:	51 e4       	ldi	r21, 0x41	; 65
    1d00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	bc 01       	movw	r22, r24
    1d0a:	cd 01       	movw	r24, r26
    1d0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	9a a3       	std	Y+34, r25	; 0x22
    1d16:	89 a3       	std	Y+33, r24	; 0x21
    1d18:	0f c0       	rjmp	.+30     	; 0x1d38 <LCD_displayCharacter+0x1c0>
    1d1a:	89 e1       	ldi	r24, 0x19	; 25
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	98 a3       	std	Y+32, r25	; 0x20
    1d20:	8f 8f       	std	Y+31, r24	; 0x1f
    1d22:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d24:	98 a1       	ldd	r25, Y+32	; 0x20
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	f1 f7       	brne	.-4      	; 0x1d26 <LCD_displayCharacter+0x1ae>
    1d2a:	98 a3       	std	Y+32, r25	; 0x20
    1d2c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d30:	9a a1       	ldd	r25, Y+34	; 0x22
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	9a a3       	std	Y+34, r25	; 0x22
    1d36:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d38:	89 a1       	ldd	r24, Y+33	; 0x21
    1d3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d3c:	00 97       	sbiw	r24, 0x00	; 0
    1d3e:	69 f7       	brne	.-38     	; 0x1d1a <LCD_displayCharacter+0x1a2>
    1d40:	14 c0       	rjmp	.+40     	; 0x1d6a <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d42:	6b a1       	ldd	r22, Y+35	; 0x23
    1d44:	7c a1       	ldd	r23, Y+36	; 0x24
    1d46:	8d a1       	ldd	r24, Y+37	; 0x25
    1d48:	9e a1       	ldd	r25, Y+38	; 0x26
    1d4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	9a a3       	std	Y+34, r25	; 0x22
    1d54:	89 a3       	std	Y+33, r24	; 0x21
    1d56:	89 a1       	ldd	r24, Y+33	; 0x21
    1d58:	9a a1       	ldd	r25, Y+34	; 0x22
    1d5a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d5c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d60:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	f1 f7       	brne	.-4      	; 0x1d62 <LCD_displayCharacter+0x1ea>
    1d66:	9e 8f       	std	Y+30, r25	; 0x1e
    1d68:	8d 8f       	std	Y+29, r24	; 0x1d
	/* From AC Characteristic of LCD  must delay (tpw-tdsw) by 190 nSec*/
	_delay_ms(1);
	/* Send Command*/
#ifndef LCD_FOUR_BIT_MODE
	GPIO_writePort(LCD_DATA_PORT_ID,data);
    1d6a:	82 e0       	ldi	r24, 0x02	; 2
    1d6c:	69 ad       	ldd	r22, Y+57	; 0x39
    1d6e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <GPIO_writePort>
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	a0 e8       	ldi	r26, 0x80	; 128
    1d78:	bf e3       	ldi	r27, 0x3F	; 63
    1d7a:	89 8f       	std	Y+25, r24	; 0x19
    1d7c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d7e:	ab 8f       	std	Y+27, r26	; 0x1b
    1d80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d82:	69 8d       	ldd	r22, Y+25	; 0x19
    1d84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	4a e7       	ldi	r20, 0x7A	; 122
    1d90:	53 e4       	ldi	r21, 0x43	; 67
    1d92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	8d 8b       	std	Y+21, r24	; 0x15
    1d9c:	9e 8b       	std	Y+22, r25	; 0x16
    1d9e:	af 8b       	std	Y+23, r26	; 0x17
    1da0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1da2:	6d 89       	ldd	r22, Y+21	; 0x15
    1da4:	7e 89       	ldd	r23, Y+22	; 0x16
    1da6:	8f 89       	ldd	r24, Y+23	; 0x17
    1da8:	98 8d       	ldd	r25, Y+24	; 0x18
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	40 e8       	ldi	r20, 0x80	; 128
    1db0:	5f e3       	ldi	r21, 0x3F	; 63
    1db2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1db6:	88 23       	and	r24, r24
    1db8:	2c f4       	brge	.+10     	; 0x1dc4 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	9c 8b       	std	Y+20, r25	; 0x14
    1dc0:	8b 8b       	std	Y+19, r24	; 0x13
    1dc2:	3f c0       	rjmp	.+126    	; 0x1e42 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1dc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dca:	98 8d       	ldd	r25, Y+24	; 0x18
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	3f ef       	ldi	r19, 0xFF	; 255
    1dd0:	4f e7       	ldi	r20, 0x7F	; 127
    1dd2:	57 e4       	ldi	r21, 0x47	; 71
    1dd4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dd8:	18 16       	cp	r1, r24
    1dda:	4c f5       	brge	.+82     	; 0x1e2e <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ddc:	69 8d       	ldd	r22, Y+25	; 0x19
    1dde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1de0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1de2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e2       	ldi	r20, 0x20	; 32
    1dea:	51 e4       	ldi	r21, 0x41	; 65
    1dec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	bc 01       	movw	r22, r24
    1df6:	cd 01       	movw	r24, r26
    1df8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	9c 8b       	std	Y+20, r25	; 0x14
    1e02:	8b 8b       	std	Y+19, r24	; 0x13
    1e04:	0f c0       	rjmp	.+30     	; 0x1e24 <LCD_displayCharacter+0x2ac>
    1e06:	89 e1       	ldi	r24, 0x19	; 25
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	9a 8b       	std	Y+18, r25	; 0x12
    1e0c:	89 8b       	std	Y+17, r24	; 0x11
    1e0e:	89 89       	ldd	r24, Y+17	; 0x11
    1e10:	9a 89       	ldd	r25, Y+18	; 0x12
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	f1 f7       	brne	.-4      	; 0x1e12 <LCD_displayCharacter+0x29a>
    1e16:	9a 8b       	std	Y+18, r25	; 0x12
    1e18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	9c 8b       	std	Y+20, r25	; 0x14
    1e22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e24:	8b 89       	ldd	r24, Y+19	; 0x13
    1e26:	9c 89       	ldd	r25, Y+20	; 0x14
    1e28:	00 97       	sbiw	r24, 0x00	; 0
    1e2a:	69 f7       	brne	.-38     	; 0x1e06 <LCD_displayCharacter+0x28e>
    1e2c:	14 c0       	rjmp	.+40     	; 0x1e56 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e30:	7e 89       	ldd	r23, Y+22	; 0x16
    1e32:	8f 89       	ldd	r24, Y+23	; 0x17
    1e34:	98 8d       	ldd	r25, Y+24	; 0x18
    1e36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	9c 8b       	std	Y+20, r25	; 0x14
    1e40:	8b 8b       	std	Y+19, r24	; 0x13
    1e42:	8b 89       	ldd	r24, Y+19	; 0x13
    1e44:	9c 89       	ldd	r25, Y+20	; 0x14
    1e46:	98 8b       	std	Y+16, r25	; 0x10
    1e48:	8f 87       	std	Y+15, r24	; 0x0f
    1e4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e4c:	98 89       	ldd	r25, Y+16	; 0x10
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	f1 f7       	brne	.-4      	; 0x1e4e <LCD_displayCharacter+0x2d6>
    1e52:	98 8b       	std	Y+16, r25	; 0x10
    1e54:	8f 87       	std	Y+15, r24	; 0x0f
	/* From AC Characteristic of LCD  must delay tdsw by 100 nSec*/
	_delay_ms(1);
	/* Return E=0*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID ,LOGIC_LOW);
    1e56:	83 e0       	ldi	r24, 0x03	; 3
    1e58:	62 e0       	ldi	r22, 0x02	; 2
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	0e 94 de 08 	call	0x11bc	; 0x11bc <GPIO_writePin>
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	a0 e8       	ldi	r26, 0x80	; 128
    1e66:	bf e3       	ldi	r27, 0x3F	; 63
    1e68:	8b 87       	std	Y+11, r24	; 0x0b
    1e6a:	9c 87       	std	Y+12, r25	; 0x0c
    1e6c:	ad 87       	std	Y+13, r26	; 0x0d
    1e6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	4a e7       	ldi	r20, 0x7A	; 122
    1e7e:	53 e4       	ldi	r21, 0x43	; 67
    1e80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	8f 83       	std	Y+7, r24	; 0x07
    1e8a:	98 87       	std	Y+8, r25	; 0x08
    1e8c:	a9 87       	std	Y+9, r26	; 0x09
    1e8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e90:	6f 81       	ldd	r22, Y+7	; 0x07
    1e92:	78 85       	ldd	r23, Y+8	; 0x08
    1e94:	89 85       	ldd	r24, Y+9	; 0x09
    1e96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e8       	ldi	r20, 0x80	; 128
    1e9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ea0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ea4:	88 23       	and	r24, r24
    1ea6:	2c f4       	brge	.+10     	; 0x1eb2 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	9e 83       	std	Y+6, r25	; 0x06
    1eae:	8d 83       	std	Y+5, r24	; 0x05
    1eb0:	3f c0       	rjmp	.+126    	; 0x1f30 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1eb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb4:	78 85       	ldd	r23, Y+8	; 0x08
    1eb6:	89 85       	ldd	r24, Y+9	; 0x09
    1eb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	3f ef       	ldi	r19, 0xFF	; 255
    1ebe:	4f e7       	ldi	r20, 0x7F	; 127
    1ec0:	57 e4       	ldi	r21, 0x47	; 71
    1ec2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ec6:	18 16       	cp	r1, r24
    1ec8:	4c f5       	brge	.+82     	; 0x1f1c <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ecc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ece:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	40 e2       	ldi	r20, 0x20	; 32
    1ed8:	51 e4       	ldi	r21, 0x41	; 65
    1eda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	bc 01       	movw	r22, r24
    1ee4:	cd 01       	movw	r24, r26
    1ee6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	9e 83       	std	Y+6, r25	; 0x06
    1ef0:	8d 83       	std	Y+5, r24	; 0x05
    1ef2:	0f c0       	rjmp	.+30     	; 0x1f12 <LCD_displayCharacter+0x39a>
    1ef4:	89 e1       	ldi	r24, 0x19	; 25
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	9c 83       	std	Y+4, r25	; 0x04
    1efa:	8b 83       	std	Y+3, r24	; 0x03
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	9c 81       	ldd	r25, Y+4	; 0x04
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	f1 f7       	brne	.-4      	; 0x1f00 <LCD_displayCharacter+0x388>
    1f04:	9c 83       	std	Y+4, r25	; 0x04
    1f06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f08:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	9e 83       	std	Y+6, r25	; 0x06
    1f10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f12:	8d 81       	ldd	r24, Y+5	; 0x05
    1f14:	9e 81       	ldd	r25, Y+6	; 0x06
    1f16:	00 97       	sbiw	r24, 0x00	; 0
    1f18:	69 f7       	brne	.-38     	; 0x1ef4 <LCD_displayCharacter+0x37c>
    1f1a:	14 c0       	rjmp	.+40     	; 0x1f44 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1e:	78 85       	ldd	r23, Y+8	; 0x08
    1f20:	89 85       	ldd	r24, Y+9	; 0x09
    1f22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	9e 83       	std	Y+6, r25	; 0x06
    1f2e:	8d 83       	std	Y+5, r24	; 0x05
    1f30:	8d 81       	ldd	r24, Y+5	; 0x05
    1f32:	9e 81       	ldd	r25, Y+6	; 0x06
    1f34:	9a 83       	std	Y+2, r25	; 0x02
    1f36:	89 83       	std	Y+1, r24	; 0x01
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	f1 f7       	brne	.-4      	; 0x1f3c <LCD_displayCharacter+0x3c4>
    1f40:	9a 83       	std	Y+2, r25	; 0x02
    1f42:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
	#endif

}
    1f44:	e9 96       	adiw	r28, 0x39	; 57
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	08 95       	ret

00001f56 <LCD_displayString>:
 * Function Name: LCD_displayString()
 * Description:
 * 	Display a String on LCD
 */
void LCD_displayString(const char*str)
{
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	00 d0       	rcall	.+0      	; 0x1f5c <LCD_displayString+0x6>
    1f5c:	0f 92       	push	r0
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	9b 83       	std	Y+3, r25	; 0x03
    1f64:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    1f66:	19 82       	std	Y+1, r1	; 0x01
    1f68:	0e c0       	rjmp	.+28     	; 0x1f86 <LCD_displayString+0x30>
	while(str[i]!='\0')
	{
		LCD_displayCharacter(str[i]);
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	9b 81       	ldd	r25, Y+3	; 0x03
    1f74:	fc 01       	movw	r30, r24
    1f76:	e2 0f       	add	r30, r18
    1f78:	f3 1f       	adc	r31, r19
    1f7a:	80 81       	ld	r24, Z
    1f7c:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LCD_displayCharacter>
		i++;
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	8f 5f       	subi	r24, 0xFF	; 255
    1f84:	89 83       	std	Y+1, r24	; 0x01
 * 	Display a String on LCD
 */
void LCD_displayString(const char*str)
{
	uint8 i=0;
	while(str[i]!='\0')
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f90:	fc 01       	movw	r30, r24
    1f92:	e2 0f       	add	r30, r18
    1f94:	f3 1f       	adc	r31, r19
    1f96:	80 81       	ld	r24, Z
    1f98:	88 23       	and	r24, r24
    1f9a:	39 f7       	brne	.-50     	; 0x1f6a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <LCD_moveCursor>:
 * Function Name: LCD_moveCursor()
 * Description:
 * 	Move Cursor to the specific location accroding to row and col
 */
void LCD_moveCursor(uint8 row ,uint8 col)
{
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	00 d0       	rcall	.+0      	; 0x1fae <LCD_moveCursor+0x6>
    1fae:	00 d0       	rcall	.+0      	; 0x1fb0 <LCD_moveCursor+0x8>
    1fb0:	0f 92       	push	r0
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
    1fb6:	8a 83       	std	Y+2, r24	; 0x02
    1fb8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	3d 83       	std	Y+5, r19	; 0x05
    1fc2:	2c 83       	std	Y+4, r18	; 0x04
    1fc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc8:	81 30       	cpi	r24, 0x01	; 1
    1fca:	91 05       	cpc	r25, r1
    1fcc:	c1 f0       	breq	.+48     	; 0x1ffe <LCD_moveCursor+0x56>
    1fce:	2c 81       	ldd	r18, Y+4	; 0x04
    1fd0:	3d 81       	ldd	r19, Y+5	; 0x05
    1fd2:	22 30       	cpi	r18, 0x02	; 2
    1fd4:	31 05       	cpc	r19, r1
    1fd6:	2c f4       	brge	.+10     	; 0x1fe2 <LCD_moveCursor+0x3a>
    1fd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fda:	9d 81       	ldd	r25, Y+5	; 0x05
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	61 f0       	breq	.+24     	; 0x1ff8 <LCD_moveCursor+0x50>
    1fe0:	19 c0       	rjmp	.+50     	; 0x2014 <LCD_moveCursor+0x6c>
    1fe2:	2c 81       	ldd	r18, Y+4	; 0x04
    1fe4:	3d 81       	ldd	r19, Y+5	; 0x05
    1fe6:	22 30       	cpi	r18, 0x02	; 2
    1fe8:	31 05       	cpc	r19, r1
    1fea:	69 f0       	breq	.+26     	; 0x2006 <LCD_moveCursor+0x5e>
    1fec:	8c 81       	ldd	r24, Y+4	; 0x04
    1fee:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff0:	83 30       	cpi	r24, 0x03	; 3
    1ff2:	91 05       	cpc	r25, r1
    1ff4:	61 f0       	breq	.+24     	; 0x200e <LCD_moveCursor+0x66>
    1ff6:	0e c0       	rjmp	.+28     	; 0x2014 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    1ffc:	0b c0       	rjmp	.+22     	; 0x2014 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    1ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    2000:	80 5c       	subi	r24, 0xC0	; 192
    2002:	89 83       	std	Y+1, r24	; 0x01
    2004:	07 c0       	rjmp	.+14     	; 0x2014 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	80 5f       	subi	r24, 0xF0	; 240
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	03 c0       	rjmp	.+6      	; 0x2014 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	80 5b       	subi	r24, 0xB0	; 176
    2012:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	80 68       	ori	r24, 0x80	; 128
    2018:	0e 94 cd 0b 	call	0x179a	; 0x179a <LCD_sendCommand>

}
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	cf 91       	pop	r28
    2028:	df 91       	pop	r29
    202a:	08 95       	ret

0000202c <LCD_displayStringRowColumn>:
 * Function Name: LCD_displayStringRowColumn()
 * Description :
 * 		Display a String At any Position in LCD
 */
void LCD_displayStringRowColumn(uint8 row ,uint8 col,const char*str)
{
    202c:	df 93       	push	r29
    202e:	cf 93       	push	r28
    2030:	00 d0       	rcall	.+0      	; 0x2032 <LCD_displayStringRowColumn+0x6>
    2032:	00 d0       	rcall	.+0      	; 0x2034 <LCD_displayStringRowColumn+0x8>
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
    2038:	89 83       	std	Y+1, r24	; 0x01
    203a:	6a 83       	std	Y+2, r22	; 0x02
    203c:	5c 83       	std	Y+4, r21	; 0x04
    203e:	4b 83       	std	Y+3, r20	; 0x03
	/* go to required position*/
	LCD_moveCursor(row,col);
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	6a 81       	ldd	r22, Y+2	; 0x02
    2044:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <LCD_moveCursor>
	/*display*/
	LCD_displayString(str);
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	9c 81       	ldd	r25, Y+4	; 0x04
    204c:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_displayString>
}
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	cf 91       	pop	r28
    205a:	df 91       	pop	r29
    205c:	08 95       	ret

0000205e <LCD_integerToString>:
 * Function Name: LCD_integerToString()
 * Description:
 * 		Convert interger to String and Display it
 */
void LCD_integerToString(int data)
{
    205e:	df 93       	push	r29
    2060:	cf 93       	push	r28
    2062:	cd b7       	in	r28, 0x3d	; 61
    2064:	de b7       	in	r29, 0x3e	; 62
    2066:	62 97       	sbiw	r28, 0x12	; 18
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	9a 8b       	std	Y+18, r25	; 0x12
    2074:	89 8b       	std	Y+17, r24	; 0x11
	/*Make Array of Character to store ascii of num and size=16,because this Max num can show*/
	char buffer[16];
	/*Using C-Built in-function , 10 is the Base of Number*/
	itoa(data,buffer,10); /* buffer[0]=ASCII for first digit of integer num and So on*/
    2076:	89 89       	ldd	r24, Y+17	; 0x11
    2078:	9a 89       	ldd	r25, Y+18	; 0x12
    207a:	9e 01       	movw	r18, r28
    207c:	2f 5f       	subi	r18, 0xFF	; 255
    207e:	3f 4f       	sbci	r19, 0xFF	; 255
    2080:	b9 01       	movw	r22, r18
    2082:	4a e0       	ldi	r20, 0x0A	; 10
    2084:	50 e0       	ldi	r21, 0x00	; 0
    2086:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <itoa>
	LCD_displayString(buffer);
    208a:	ce 01       	movw	r24, r28
    208c:	01 96       	adiw	r24, 0x01	; 1
    208e:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_displayString>
}
    2092:	62 96       	adiw	r28, 0x12	; 18
    2094:	0f b6       	in	r0, 0x3f	; 63
    2096:	f8 94       	cli
    2098:	de bf       	out	0x3e, r29	; 62
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	cd bf       	out	0x3d, r28	; 61
    209e:	cf 91       	pop	r28
    20a0:	df 91       	pop	r29
    20a2:	08 95       	ret

000020a4 <LCD_clearScreen>:
/* Function Name: LCD_clearScreen
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	0e 94 cd 0b 	call	0x179a	; 0x179a <LCD_sendCommand>
}
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <LM35_getTemperature>:
 * Function Name : LM35_getTemperature()
 * Description:
 * 	return temperature value which sensor get it
 */
uint8 LM35_getTemperature(void)
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	00 d0       	rcall	.+0      	; 0x20be <LM35_getTemperature+0x6>
    20be:	0f 92       	push	r0
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value=0;
    20c4:	1b 82       	std	Y+3, r1	; 0x03
	uint16 digital_value=0;
    20c6:	1a 82       	std	Y+2, r1	; 0x02
    20c8:	19 82       	std	Y+1, r1	; 0x01
	/*get digital Value after use ADC to convert Analog temperature to digital*/
	digital_value=ADC_readChannel(SENSOR_CHANNEL_ID);
    20ca:	82 e0       	ldi	r24, 0x02	; 2
    20cc:	0e 94 45 07 	call	0xe8a	; 0xe8a <ADC_readChannel>
    20d0:	9a 83       	std	Y+2, r25	; 0x02
    20d2:	89 83       	std	Y+1, r24	; 0x01
	/* Sensor Equation to get temperature Value from digital reading*/
	temp_value=	(uint8)(((uint32)SENSOR_MAX_TEMPERATURE*digital_value*ADC_REF_VOLT_VALUE)/(SENSOR_MAX_VOLT_VALUE*ADC_MAXIMUM_VALUE));
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	9a 81       	ldd	r25, Y+2	; 0x02
    20d8:	cc 01       	movw	r24, r24
    20da:	a0 e0       	ldi	r26, 0x00	; 0
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	26 e9       	ldi	r18, 0x96	; 150
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e0       	ldi	r20, 0x00	; 0
    20e4:	50 e0       	ldi	r21, 0x00	; 0
    20e6:	bc 01       	movw	r22, r24
    20e8:	cd 01       	movw	r24, r26
    20ea:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <__mulsi3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	bc 01       	movw	r22, r24
    20f4:	cd 01       	movw	r24, r26
    20f6:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	bc 01       	movw	r22, r24
    2100:	cd 01       	movw	r24, r26
    2102:	2a e0       	ldi	r18, 0x0A	; 10
    2104:	37 ed       	ldi	r19, 0xD7	; 215
    2106:	43 e2       	ldi	r20, 0x23	; 35
    2108:	50 e4       	ldi	r21, 0x40	; 64
    210a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	bc 01       	movw	r22, r24
    2114:	cd 01       	movw	r24, r26
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 ed       	ldi	r19, 0xD0	; 208
    211a:	4f eb       	ldi	r20, 0xBF	; 191
    211c:	54 e4       	ldi	r21, 0x44	; 68
    211e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	bc 01       	movw	r22, r24
    2128:	cd 01       	movw	r24, r26
    212a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	8b 83       	std	Y+3, r24	; 0x03
	/*return temperature Value*/
	return temp_value;
    2134:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <PWM_Timer0_Start>:
 * Function Name: PWM_Timer0_Start()
 * Description:
 * Generate Waveform on OC0 pin with frequency 488.28 HZ
 */
void PWM_Timer0_Start(const Config_Timer0 * Confige_Ptr , uint8 duty_cycle)
{
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	00 d0       	rcall	.+0      	; 0x2148 <PWM_Timer0_Start+0x6>
    2148:	0f 92       	push	r0
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
    214e:	9a 83       	std	Y+2, r25	; 0x02
    2150:	89 83       	std	Y+1, r24	; 0x01
    2152:	6b 83       	std	Y+3, r22	; 0x03
	 * 1.Set up Timer in Fast PWM Mode
	 * 2.Because WGM01 and WGM00 ,They're Not in Order
	 * 3.WGM01 BIT NUM 3 in TCCR0
	 * 4.WGM00 BIT NUM 6 in TCCR0
	 ************************************************************/
	TCCR0= (TCCR0 & 0xB7) | ((GET_BIT(Confige_Ptr ->Config_Mode,0))<<6) | (( GET_BIT(Confige_Ptr->Config_Mode,1))<<3);
    2154:	a3 e5       	ldi	r26, 0x53	; 83
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e3 e5       	ldi	r30, 0x53	; 83
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	28 2f       	mov	r18, r24
    2160:	27 7b       	andi	r18, 0xB7	; 183
    2162:	e9 81       	ldd	r30, Y+1	; 0x01
    2164:	fa 81       	ldd	r31, Y+2	; 0x02
    2166:	80 81       	ld	r24, Z
    2168:	88 2f       	mov	r24, r24
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	81 70       	andi	r24, 0x01	; 1
    216e:	90 70       	andi	r25, 0x00	; 0
    2170:	00 24       	eor	r0, r0
    2172:	96 95       	lsr	r25
    2174:	87 95       	ror	r24
    2176:	07 94       	ror	r0
    2178:	96 95       	lsr	r25
    217a:	87 95       	ror	r24
    217c:	07 94       	ror	r0
    217e:	98 2f       	mov	r25, r24
    2180:	80 2d       	mov	r24, r0
    2182:	28 2b       	or	r18, r24
    2184:	e9 81       	ldd	r30, Y+1	; 0x01
    2186:	fa 81       	ldd	r31, Y+2	; 0x02
    2188:	80 81       	ld	r24, Z
    218a:	88 2f       	mov	r24, r24
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	82 70       	andi	r24, 0x02	; 2
    2190:	90 70       	andi	r25, 0x00	; 0
    2192:	95 95       	asr	r25
    2194:	87 95       	ror	r24
    2196:	88 0f       	add	r24, r24
    2198:	99 1f       	adc	r25, r25
    219a:	88 0f       	add	r24, r24
    219c:	99 1f       	adc	r25, r25
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	82 2b       	or	r24, r18
    21a4:	8c 93       	st	X, r24
	/* Non-Inverting PWM Mode Start from HIGH*/
	TCCR0 = ( TCCR0 & 0xCF) | (( Confige_Ptr->PWM_Mode)<<4);
    21a6:	a3 e5       	ldi	r26, 0x53	; 83
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e3 e5       	ldi	r30, 0x53	; 83
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	28 2f       	mov	r18, r24
    21b2:	2f 7c       	andi	r18, 0xCF	; 207
    21b4:	e9 81       	ldd	r30, Y+1	; 0x01
    21b6:	fa 81       	ldd	r31, Y+2	; 0x02
    21b8:	81 81       	ldd	r24, Z+1	; 0x01
    21ba:	88 2f       	mov	r24, r24
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	82 95       	swap	r24
    21c0:	92 95       	swap	r25
    21c2:	90 7f       	andi	r25, 0xF0	; 240
    21c4:	98 27       	eor	r25, r24
    21c6:	80 7f       	andi	r24, 0xF0	; 240
    21c8:	98 27       	eor	r25, r24
    21ca:	82 2b       	or	r24, r18
    21cc:	8c 93       	st	X, r24
	/*Choose PreScaler*/
	TCCR0 = ( TCCR0 & 0xF8 ) | (Confige_Ptr->Config_Prescaler);
    21ce:	a3 e5       	ldi	r26, 0x53	; 83
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	e3 e5       	ldi	r30, 0x53	; 83
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	98 2f       	mov	r25, r24
    21da:	98 7f       	andi	r25, 0xF8	; 248
    21dc:	e9 81       	ldd	r30, Y+1	; 0x01
    21de:	fa 81       	ldd	r31, Y+2	; 0x02
    21e0:	82 81       	ldd	r24, Z+2	; 0x02
    21e2:	89 2b       	or	r24, r25
    21e4:	8c 93       	st	X, r24
	/*initial value 0 to timer register*/
	TCNT0=0;
    21e6:	e2 e5       	ldi	r30, 0x52	; 82
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	10 82       	st	Z, r1
	/* Pass I/P value to compare Register
	 * Multiple *2.55 because Range speed from 0to 100 but Range
	 * */
	duty_cycle=	(uint8)(((uint16)duty_cycle * 255)/100);
    21ec:	8b 81       	ldd	r24, Y+3	; 0x03
    21ee:	48 2f       	mov	r20, r24
    21f0:	50 e0       	ldi	r21, 0x00	; 0
    21f2:	ca 01       	movw	r24, r20
    21f4:	9c 01       	movw	r18, r24
    21f6:	22 0f       	add	r18, r18
    21f8:	33 1f       	adc	r19, r19
    21fa:	c9 01       	movw	r24, r18
    21fc:	96 95       	lsr	r25
    21fe:	98 2f       	mov	r25, r24
    2200:	88 27       	eor	r24, r24
    2202:	97 95       	ror	r25
    2204:	87 95       	ror	r24
    2206:	82 1b       	sub	r24, r18
    2208:	93 0b       	sbc	r25, r19
    220a:	84 0f       	add	r24, r20
    220c:	95 1f       	adc	r25, r21
    220e:	24 e6       	ldi	r18, 0x64	; 100
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	b9 01       	movw	r22, r18
    2214:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <__udivmodhi4>
    2218:	cb 01       	movw	r24, r22
    221a:	8b 83       	std	Y+3, r24	; 0x03
	OCR0=duty_cycle;
    221c:	ec e5       	ldi	r30, 0x5C	; 92
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	8b 81       	ldd	r24, Y+3	; 0x03
    2222:	80 83       	st	Z, r24
	/*Make OC0/PB3 Output pin*/
	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,OUTPUT_PIN);
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	63 e0       	ldi	r22, 0x03	; 3
    2228:	41 e0       	ldi	r20, 0x01	; 1
    222a:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <GPIO_setupPinDirection>
}
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	08 95       	ret

0000223a <main>:
 ********************************************************
 * 	HAL:	DC_MOTOR 		LCD			Temperature_Sensor
 * 	MCAL:	TIMER0(PWM)		DIO			ADC
 ********************************************************/
int main(void)
{
    223a:	0f 93       	push	r16
    223c:	1f 93       	push	r17
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	c5 56       	subi	r28, 0x65	; 101
    2248:	d0 40       	sbci	r29, 0x00	; 0
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	cd bf       	out	0x3d, r28	; 61
	uint8 temp;
	/* Start LCD and DcMotor*/
	LCD_init();
    2254:	0e 94 31 0b 	call	0x1662	; 0x1662 <LCD_init>
	DcMotor_init();
    2258:	0e 94 75 07 	call	0xeea	; 0xeea <DcMotor_init>
	/* Choose Internal_RefVolt and PreScaler 8*/
	ConfigType ADC_Config ={Internal_Ref_ON , N_8 };
    225c:	fe 01       	movw	r30, r28
    225e:	ec 59       	subi	r30, 0x9C	; 156
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	83 e0       	ldi	r24, 0x03	; 3
    2264:	80 83       	st	Z, r24
    2266:	fe 01       	movw	r30, r28
    2268:	ec 59       	subi	r30, 0x9C	; 156
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	83 e0       	ldi	r24, 0x03	; 3
    226e:	81 83       	std	Z+1, r24	; 0x01
	ADC_init( &ADC_Config);
    2270:	ce 01       	movw	r24, r28
    2272:	8c 59       	subi	r24, 0x9C	; 156
    2274:	9f 4f       	sbci	r25, 0xFF	; 255
    2276:	0e 94 0f 07 	call	0xe1e	; 0xe1e <ADC_init>
	/*Just Display*/
	LCD_moveCursor(0,4);
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	64 e0       	ldi	r22, 0x04	; 4
    227e:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <LCD_moveCursor>
	LCD_displayString("Hello :)");
    2282:	80 e6       	ldi	r24, 0x60	; 96
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_displayString>
    228a:	fe 01       	movw	r30, r28
    228c:	e1 5a       	subi	r30, 0xA1	; 161
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	a8 e4       	ldi	r26, 0x48	; 72
    2296:	b3 e4       	ldi	r27, 0x43	; 67
    2298:	80 83       	st	Z, r24
    229a:	91 83       	std	Z+1, r25	; 0x01
    229c:	a2 83       	std	Z+2, r26	; 0x02
    229e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a0:	8e 01       	movw	r16, r28
    22a2:	05 5a       	subi	r16, 0xA5	; 165
    22a4:	1f 4f       	sbci	r17, 0xFF	; 255
    22a6:	fe 01       	movw	r30, r28
    22a8:	e1 5a       	subi	r30, 0xA1	; 161
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	60 81       	ld	r22, Z
    22ae:	71 81       	ldd	r23, Z+1	; 0x01
    22b0:	82 81       	ldd	r24, Z+2	; 0x02
    22b2:	93 81       	ldd	r25, Z+3	; 0x03
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	4a e7       	ldi	r20, 0x7A	; 122
    22ba:	53 e4       	ldi	r21, 0x43	; 67
    22bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	f8 01       	movw	r30, r16
    22c6:	80 83       	st	Z, r24
    22c8:	91 83       	std	Z+1, r25	; 0x01
    22ca:	a2 83       	std	Z+2, r26	; 0x02
    22cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22ce:	fe 01       	movw	r30, r28
    22d0:	e5 5a       	subi	r30, 0xA5	; 165
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	60 81       	ld	r22, Z
    22d6:	71 81       	ldd	r23, Z+1	; 0x01
    22d8:	82 81       	ldd	r24, Z+2	; 0x02
    22da:	93 81       	ldd	r25, Z+3	; 0x03
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e8       	ldi	r20, 0x80	; 128
    22e2:	5f e3       	ldi	r21, 0x3F	; 63
    22e4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22e8:	88 23       	and	r24, r24
    22ea:	44 f4       	brge	.+16     	; 0x22fc <main+0xc2>
		__ticks = 1;
    22ec:	fe 01       	movw	r30, r28
    22ee:	e7 5a       	subi	r30, 0xA7	; 167
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	91 83       	std	Z+1, r25	; 0x01
    22f8:	80 83       	st	Z, r24
    22fa:	64 c0       	rjmp	.+200    	; 0x23c4 <main+0x18a>
	else if (__tmp > 65535)
    22fc:	fe 01       	movw	r30, r28
    22fe:	e5 5a       	subi	r30, 0xA5	; 165
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	60 81       	ld	r22, Z
    2304:	71 81       	ldd	r23, Z+1	; 0x01
    2306:	82 81       	ldd	r24, Z+2	; 0x02
    2308:	93 81       	ldd	r25, Z+3	; 0x03
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	3f ef       	ldi	r19, 0xFF	; 255
    230e:	4f e7       	ldi	r20, 0x7F	; 127
    2310:	57 e4       	ldi	r21, 0x47	; 71
    2312:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2316:	18 16       	cp	r1, r24
    2318:	0c f0       	brlt	.+2      	; 0x231c <main+0xe2>
    231a:	43 c0       	rjmp	.+134    	; 0x23a2 <main+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231c:	fe 01       	movw	r30, r28
    231e:	e1 5a       	subi	r30, 0xA1	; 161
    2320:	ff 4f       	sbci	r31, 0xFF	; 255
    2322:	60 81       	ld	r22, Z
    2324:	71 81       	ldd	r23, Z+1	; 0x01
    2326:	82 81       	ldd	r24, Z+2	; 0x02
    2328:	93 81       	ldd	r25, Z+3	; 0x03
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	40 e2       	ldi	r20, 0x20	; 32
    2330:	51 e4       	ldi	r21, 0x41	; 65
    2332:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	8e 01       	movw	r16, r28
    233c:	07 5a       	subi	r16, 0xA7	; 167
    233e:	1f 4f       	sbci	r17, 0xFF	; 255
    2340:	bc 01       	movw	r22, r24
    2342:	cd 01       	movw	r24, r26
    2344:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	f8 01       	movw	r30, r16
    234e:	91 83       	std	Z+1, r25	; 0x01
    2350:	80 83       	st	Z, r24
    2352:	1f c0       	rjmp	.+62     	; 0x2392 <main+0x158>
    2354:	fe 01       	movw	r30, r28
    2356:	e9 5a       	subi	r30, 0xA9	; 169
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	89 e1       	ldi	r24, 0x19	; 25
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	91 83       	std	Z+1, r25	; 0x01
    2360:	80 83       	st	Z, r24
    2362:	fe 01       	movw	r30, r28
    2364:	e9 5a       	subi	r30, 0xA9	; 169
    2366:	ff 4f       	sbci	r31, 0xFF	; 255
    2368:	80 81       	ld	r24, Z
    236a:	91 81       	ldd	r25, Z+1	; 0x01
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	f1 f7       	brne	.-4      	; 0x236c <main+0x132>
    2370:	fe 01       	movw	r30, r28
    2372:	e9 5a       	subi	r30, 0xA9	; 169
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	91 83       	std	Z+1, r25	; 0x01
    2378:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    237a:	de 01       	movw	r26, r28
    237c:	a7 5a       	subi	r26, 0xA7	; 167
    237e:	bf 4f       	sbci	r27, 0xFF	; 255
    2380:	fe 01       	movw	r30, r28
    2382:	e7 5a       	subi	r30, 0xA7	; 167
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	80 81       	ld	r24, Z
    2388:	91 81       	ldd	r25, Z+1	; 0x01
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	11 96       	adiw	r26, 0x01	; 1
    238e:	9c 93       	st	X, r25
    2390:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2392:	fe 01       	movw	r30, r28
    2394:	e7 5a       	subi	r30, 0xA7	; 167
    2396:	ff 4f       	sbci	r31, 0xFF	; 255
    2398:	80 81       	ld	r24, Z
    239a:	91 81       	ldd	r25, Z+1	; 0x01
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	d1 f6       	brne	.-76     	; 0x2354 <main+0x11a>
    23a0:	27 c0       	rjmp	.+78     	; 0x23f0 <main+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a2:	8e 01       	movw	r16, r28
    23a4:	07 5a       	subi	r16, 0xA7	; 167
    23a6:	1f 4f       	sbci	r17, 0xFF	; 255
    23a8:	fe 01       	movw	r30, r28
    23aa:	e5 5a       	subi	r30, 0xA5	; 165
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	60 81       	ld	r22, Z
    23b0:	71 81       	ldd	r23, Z+1	; 0x01
    23b2:	82 81       	ldd	r24, Z+2	; 0x02
    23b4:	93 81       	ldd	r25, Z+3	; 0x03
    23b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	f8 01       	movw	r30, r16
    23c0:	91 83       	std	Z+1, r25	; 0x01
    23c2:	80 83       	st	Z, r24
    23c4:	de 01       	movw	r26, r28
    23c6:	ab 5a       	subi	r26, 0xAB	; 171
    23c8:	bf 4f       	sbci	r27, 0xFF	; 255
    23ca:	fe 01       	movw	r30, r28
    23cc:	e7 5a       	subi	r30, 0xA7	; 167
    23ce:	ff 4f       	sbci	r31, 0xFF	; 255
    23d0:	80 81       	ld	r24, Z
    23d2:	91 81       	ldd	r25, Z+1	; 0x01
    23d4:	8d 93       	st	X+, r24
    23d6:	9c 93       	st	X, r25
    23d8:	fe 01       	movw	r30, r28
    23da:	eb 5a       	subi	r30, 0xAB	; 171
    23dc:	ff 4f       	sbci	r31, 0xFF	; 255
    23de:	80 81       	ld	r24, Z
    23e0:	91 81       	ldd	r25, Z+1	; 0x01
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <main+0x1a8>
    23e6:	fe 01       	movw	r30, r28
    23e8:	eb 5a       	subi	r30, 0xAB	; 171
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	91 83       	std	Z+1, r25	; 0x01
    23ee:	80 83       	st	Z, r24
	_delay_ms(200);
	LCD_moveCursor(0,2);
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	62 e0       	ldi	r22, 0x02	; 2
    23f4:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <LCD_moveCursor>
	LCD_displayString("Fan Controller");
    23f8:	89 e6       	ldi	r24, 0x69	; 105
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_displayString>
	LCD_moveCursor(1,6);
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	66 e0       	ldi	r22, 0x06	; 6
    2404:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <LCD_moveCursor>
	LCD_displayString("System");
    2408:	88 e7       	ldi	r24, 0x78	; 120
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_displayString>
    2410:	fe 01       	movw	r30, r28
    2412:	ef 5a       	subi	r30, 0xAF	; 175
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	a8 e4       	ldi	r26, 0x48	; 72
    241c:	b3 e4       	ldi	r27, 0x43	; 67
    241e:	80 83       	st	Z, r24
    2420:	91 83       	std	Z+1, r25	; 0x01
    2422:	a2 83       	std	Z+2, r26	; 0x02
    2424:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2426:	8e 01       	movw	r16, r28
    2428:	03 5b       	subi	r16, 0xB3	; 179
    242a:	1f 4f       	sbci	r17, 0xFF	; 255
    242c:	fe 01       	movw	r30, r28
    242e:	ef 5a       	subi	r30, 0xAF	; 175
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	60 81       	ld	r22, Z
    2434:	71 81       	ldd	r23, Z+1	; 0x01
    2436:	82 81       	ldd	r24, Z+2	; 0x02
    2438:	93 81       	ldd	r25, Z+3	; 0x03
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	4a e7       	ldi	r20, 0x7A	; 122
    2440:	53 e4       	ldi	r21, 0x43	; 67
    2442:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	f8 01       	movw	r30, r16
    244c:	80 83       	st	Z, r24
    244e:	91 83       	std	Z+1, r25	; 0x01
    2450:	a2 83       	std	Z+2, r26	; 0x02
    2452:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2454:	fe 01       	movw	r30, r28
    2456:	e3 5b       	subi	r30, 0xB3	; 179
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	60 81       	ld	r22, Z
    245c:	71 81       	ldd	r23, Z+1	; 0x01
    245e:	82 81       	ldd	r24, Z+2	; 0x02
    2460:	93 81       	ldd	r25, Z+3	; 0x03
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	40 e8       	ldi	r20, 0x80	; 128
    2468:	5f e3       	ldi	r21, 0x3F	; 63
    246a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    246e:	88 23       	and	r24, r24
    2470:	44 f4       	brge	.+16     	; 0x2482 <main+0x248>
		__ticks = 1;
    2472:	fe 01       	movw	r30, r28
    2474:	e5 5b       	subi	r30, 0xB5	; 181
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	91 83       	std	Z+1, r25	; 0x01
    247e:	80 83       	st	Z, r24
    2480:	64 c0       	rjmp	.+200    	; 0x254a <main+0x310>
	else if (__tmp > 65535)
    2482:	fe 01       	movw	r30, r28
    2484:	e3 5b       	subi	r30, 0xB3	; 179
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	60 81       	ld	r22, Z
    248a:	71 81       	ldd	r23, Z+1	; 0x01
    248c:	82 81       	ldd	r24, Z+2	; 0x02
    248e:	93 81       	ldd	r25, Z+3	; 0x03
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	3f ef       	ldi	r19, 0xFF	; 255
    2494:	4f e7       	ldi	r20, 0x7F	; 127
    2496:	57 e4       	ldi	r21, 0x47	; 71
    2498:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    249c:	18 16       	cp	r1, r24
    249e:	0c f0       	brlt	.+2      	; 0x24a2 <main+0x268>
    24a0:	43 c0       	rjmp	.+134    	; 0x2528 <main+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a2:	fe 01       	movw	r30, r28
    24a4:	ef 5a       	subi	r30, 0xAF	; 175
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	60 81       	ld	r22, Z
    24aa:	71 81       	ldd	r23, Z+1	; 0x01
    24ac:	82 81       	ldd	r24, Z+2	; 0x02
    24ae:	93 81       	ldd	r25, Z+3	; 0x03
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e2       	ldi	r20, 0x20	; 32
    24b6:	51 e4       	ldi	r21, 0x41	; 65
    24b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	8e 01       	movw	r16, r28
    24c2:	05 5b       	subi	r16, 0xB5	; 181
    24c4:	1f 4f       	sbci	r17, 0xFF	; 255
    24c6:	bc 01       	movw	r22, r24
    24c8:	cd 01       	movw	r24, r26
    24ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	f8 01       	movw	r30, r16
    24d4:	91 83       	std	Z+1, r25	; 0x01
    24d6:	80 83       	st	Z, r24
    24d8:	1f c0       	rjmp	.+62     	; 0x2518 <main+0x2de>
    24da:	fe 01       	movw	r30, r28
    24dc:	e7 5b       	subi	r30, 0xB7	; 183
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	89 e1       	ldi	r24, 0x19	; 25
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	91 83       	std	Z+1, r25	; 0x01
    24e6:	80 83       	st	Z, r24
    24e8:	fe 01       	movw	r30, r28
    24ea:	e7 5b       	subi	r30, 0xB7	; 183
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	80 81       	ld	r24, Z
    24f0:	91 81       	ldd	r25, Z+1	; 0x01
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <main+0x2b8>
    24f6:	fe 01       	movw	r30, r28
    24f8:	e7 5b       	subi	r30, 0xB7	; 183
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2500:	de 01       	movw	r26, r28
    2502:	a5 5b       	subi	r26, 0xB5	; 181
    2504:	bf 4f       	sbci	r27, 0xFF	; 255
    2506:	fe 01       	movw	r30, r28
    2508:	e5 5b       	subi	r30, 0xB5	; 181
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	80 81       	ld	r24, Z
    250e:	91 81       	ldd	r25, Z+1	; 0x01
    2510:	01 97       	sbiw	r24, 0x01	; 1
    2512:	11 96       	adiw	r26, 0x01	; 1
    2514:	9c 93       	st	X, r25
    2516:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2518:	fe 01       	movw	r30, r28
    251a:	e5 5b       	subi	r30, 0xB5	; 181
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	80 81       	ld	r24, Z
    2520:	91 81       	ldd	r25, Z+1	; 0x01
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	d1 f6       	brne	.-76     	; 0x24da <main+0x2a0>
    2526:	27 c0       	rjmp	.+78     	; 0x2576 <main+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2528:	8e 01       	movw	r16, r28
    252a:	05 5b       	subi	r16, 0xB5	; 181
    252c:	1f 4f       	sbci	r17, 0xFF	; 255
    252e:	fe 01       	movw	r30, r28
    2530:	e3 5b       	subi	r30, 0xB3	; 179
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	60 81       	ld	r22, Z
    2536:	71 81       	ldd	r23, Z+1	; 0x01
    2538:	82 81       	ldd	r24, Z+2	; 0x02
    253a:	93 81       	ldd	r25, Z+3	; 0x03
    253c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	f8 01       	movw	r30, r16
    2546:	91 83       	std	Z+1, r25	; 0x01
    2548:	80 83       	st	Z, r24
    254a:	de 01       	movw	r26, r28
    254c:	a9 5b       	subi	r26, 0xB9	; 185
    254e:	bf 4f       	sbci	r27, 0xFF	; 255
    2550:	fe 01       	movw	r30, r28
    2552:	e5 5b       	subi	r30, 0xB5	; 181
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	80 81       	ld	r24, Z
    2558:	91 81       	ldd	r25, Z+1	; 0x01
    255a:	8d 93       	st	X+, r24
    255c:	9c 93       	st	X, r25
    255e:	fe 01       	movw	r30, r28
    2560:	e9 5b       	subi	r30, 0xB9	; 185
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	80 81       	ld	r24, Z
    2566:	91 81       	ldd	r25, Z+1	; 0x01
    2568:	01 97       	sbiw	r24, 0x01	; 1
    256a:	f1 f7       	brne	.-4      	; 0x2568 <main+0x32e>
    256c:	fe 01       	movw	r30, r28
    256e:	e9 5b       	subi	r30, 0xB9	; 185
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	91 83       	std	Z+1, r25	; 0x01
    2574:	80 83       	st	Z, r24
	_delay_ms(200);
	LCD_clearScreen();
    2576:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_clearScreen>
	LCD_moveCursor(0,4);
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	64 e0       	ldi	r22, 0x04	; 4
    257e:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <LCD_moveCursor>
	LCD_displayString("FAN IS OFF");
    2582:	8f e7       	ldi	r24, 0x7F	; 127
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_displayString>
	LCD_moveCursor(1,4);
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	64 e0       	ldi	r22, 0x04	; 4
    258e:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <LCD_moveCursor>
	LCD_displayString("Temp =    C");
    2592:	8a e8       	ldi	r24, 0x8A	; 138
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_displayString>
	while(1)
	{
		/* Get Temperature from Sensor*/
		temp=LM35_getTemperature();
    259a:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LM35_getTemperature>
    259e:	fe 01       	movw	r30, r28
    25a0:	ed 59       	subi	r30, 0x9D	; 157
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	80 83       	st	Z, r24
		/*Check temp and Display ON or OFF*/
		if(temp>=100)
    25a6:	fe 01       	movw	r30, r28
    25a8:	ed 59       	subi	r30, 0x9D	; 157
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	80 81       	ld	r24, Z
    25ae:	84 36       	cpi	r24, 0x64	; 100
    25b0:	08 f4       	brcc	.+2      	; 0x25b4 <main+0x37a>
    25b2:	92 c0       	rjmp	.+292    	; 0x26d8 <main+0x49e>
		{
		LCD_moveCursor(1,11);
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	6b e0       	ldi	r22, 0x0B	; 11
    25b8:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <LCD_moveCursor>
		LCD_integerToString(temp);
    25bc:	fe 01       	movw	r30, r28
    25be:	ed 59       	subi	r30, 0x9D	; 157
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	80 81       	ld	r24, Z
    25c4:	88 2f       	mov	r24, r24
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_integerToString>
    25cc:	fe 01       	movw	r30, r28
    25ce:	ed 5b       	subi	r30, 0xBD	; 189
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	a0 ea       	ldi	r26, 0xA0	; 160
    25d8:	b1 e4       	ldi	r27, 0x41	; 65
    25da:	80 83       	st	Z, r24
    25dc:	91 83       	std	Z+1, r25	; 0x01
    25de:	a2 83       	std	Z+2, r26	; 0x02
    25e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e2:	8e 01       	movw	r16, r28
    25e4:	01 5c       	subi	r16, 0xC1	; 193
    25e6:	1f 4f       	sbci	r17, 0xFF	; 255
    25e8:	fe 01       	movw	r30, r28
    25ea:	ed 5b       	subi	r30, 0xBD	; 189
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	60 81       	ld	r22, Z
    25f0:	71 81       	ldd	r23, Z+1	; 0x01
    25f2:	82 81       	ldd	r24, Z+2	; 0x02
    25f4:	93 81       	ldd	r25, Z+3	; 0x03
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	4a e7       	ldi	r20, 0x7A	; 122
    25fc:	53 e4       	ldi	r21, 0x43	; 67
    25fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	f8 01       	movw	r30, r16
    2608:	80 83       	st	Z, r24
    260a:	91 83       	std	Z+1, r25	; 0x01
    260c:	a2 83       	std	Z+2, r26	; 0x02
    260e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2610:	fe 01       	movw	r30, r28
    2612:	ff 96       	adiw	r30, 0x3f	; 63
    2614:	60 81       	ld	r22, Z
    2616:	71 81       	ldd	r23, Z+1	; 0x01
    2618:	82 81       	ldd	r24, Z+2	; 0x02
    261a:	93 81       	ldd	r25, Z+3	; 0x03
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	40 e8       	ldi	r20, 0x80	; 128
    2622:	5f e3       	ldi	r21, 0x3F	; 63
    2624:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2628:	88 23       	and	r24, r24
    262a:	2c f4       	brge	.+10     	; 0x2636 <main+0x3fc>
		__ticks = 1;
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	9e af       	std	Y+62, r25	; 0x3e
    2632:	8d af       	std	Y+61, r24	; 0x3d
    2634:	46 c0       	rjmp	.+140    	; 0x26c2 <main+0x488>
	else if (__tmp > 65535)
    2636:	fe 01       	movw	r30, r28
    2638:	ff 96       	adiw	r30, 0x3f	; 63
    263a:	60 81       	ld	r22, Z
    263c:	71 81       	ldd	r23, Z+1	; 0x01
    263e:	82 81       	ldd	r24, Z+2	; 0x02
    2640:	93 81       	ldd	r25, Z+3	; 0x03
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	3f ef       	ldi	r19, 0xFF	; 255
    2646:	4f e7       	ldi	r20, 0x7F	; 127
    2648:	57 e4       	ldi	r21, 0x47	; 71
    264a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    264e:	18 16       	cp	r1, r24
    2650:	64 f5       	brge	.+88     	; 0x26aa <main+0x470>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2652:	fe 01       	movw	r30, r28
    2654:	ed 5b       	subi	r30, 0xBD	; 189
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	60 81       	ld	r22, Z
    265a:	71 81       	ldd	r23, Z+1	; 0x01
    265c:	82 81       	ldd	r24, Z+2	; 0x02
    265e:	93 81       	ldd	r25, Z+3	; 0x03
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	40 e2       	ldi	r20, 0x20	; 32
    2666:	51 e4       	ldi	r21, 0x41	; 65
    2668:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	bc 01       	movw	r22, r24
    2672:	cd 01       	movw	r24, r26
    2674:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	9e af       	std	Y+62, r25	; 0x3e
    267e:	8d af       	std	Y+61, r24	; 0x3d
    2680:	0f c0       	rjmp	.+30     	; 0x26a0 <main+0x466>
    2682:	89 e1       	ldi	r24, 0x19	; 25
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	9c af       	std	Y+60, r25	; 0x3c
    2688:	8b af       	std	Y+59, r24	; 0x3b
    268a:	8b ad       	ldd	r24, Y+59	; 0x3b
    268c:	9c ad       	ldd	r25, Y+60	; 0x3c
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	f1 f7       	brne	.-4      	; 0x268e <main+0x454>
    2692:	9c af       	std	Y+60, r25	; 0x3c
    2694:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2696:	8d ad       	ldd	r24, Y+61	; 0x3d
    2698:	9e ad       	ldd	r25, Y+62	; 0x3e
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	9e af       	std	Y+62, r25	; 0x3e
    269e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    26a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    26a4:	00 97       	sbiw	r24, 0x00	; 0
    26a6:	69 f7       	brne	.-38     	; 0x2682 <main+0x448>
    26a8:	26 c0       	rjmp	.+76     	; 0x26f6 <main+0x4bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26aa:	fe 01       	movw	r30, r28
    26ac:	ff 96       	adiw	r30, 0x3f	; 63
    26ae:	60 81       	ld	r22, Z
    26b0:	71 81       	ldd	r23, Z+1	; 0x01
    26b2:	82 81       	ldd	r24, Z+2	; 0x02
    26b4:	93 81       	ldd	r25, Z+3	; 0x03
    26b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	9e af       	std	Y+62, r25	; 0x3e
    26c0:	8d af       	std	Y+61, r24	; 0x3d
    26c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    26c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    26c6:	9a af       	std	Y+58, r25	; 0x3a
    26c8:	89 af       	std	Y+57, r24	; 0x39
    26ca:	89 ad       	ldd	r24, Y+57	; 0x39
    26cc:	9a ad       	ldd	r25, Y+58	; 0x3a
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	f1 f7       	brne	.-4      	; 0x26ce <main+0x494>
    26d2:	9a af       	std	Y+58, r25	; 0x3a
    26d4:	89 af       	std	Y+57, r24	; 0x39
    26d6:	0f c0       	rjmp	.+30     	; 0x26f6 <main+0x4bc>
		_delay_ms(20);			/*Just delay for hanging in Protues*/
		}
		else
		{
		LCD_moveCursor(1,11);
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	6b e0       	ldi	r22, 0x0B	; 11
    26dc:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <LCD_moveCursor>
		LCD_integerToString(temp);
    26e0:	fe 01       	movw	r30, r28
    26e2:	ed 59       	subi	r30, 0x9D	; 157
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	80 81       	ld	r24, Z
    26e8:	88 2f       	mov	r24, r24
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	0e 94 2f 10 	call	0x205e	; 0x205e <LCD_integerToString>
		LCD_displayCharacter(' ');	/*To delete Difference betweeen num two ,Three digits in LCD*/
    26f0:	80 e2       	ldi	r24, 0x20	; 32
    26f2:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LCD_displayCharacter>
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	a0 ea       	ldi	r26, 0xA0	; 160
    26fc:	b1 e4       	ldi	r27, 0x41	; 65
    26fe:	8d ab       	std	Y+53, r24	; 0x35
    2700:	9e ab       	std	Y+54, r25	; 0x36
    2702:	af ab       	std	Y+55, r26	; 0x37
    2704:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2706:	6d a9       	ldd	r22, Y+53	; 0x35
    2708:	7e a9       	ldd	r23, Y+54	; 0x36
    270a:	8f a9       	ldd	r24, Y+55	; 0x37
    270c:	98 ad       	ldd	r25, Y+56	; 0x38
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	4a e7       	ldi	r20, 0x7A	; 122
    2714:	53 e4       	ldi	r21, 0x43	; 67
    2716:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	89 ab       	std	Y+49, r24	; 0x31
    2720:	9a ab       	std	Y+50, r25	; 0x32
    2722:	ab ab       	std	Y+51, r26	; 0x33
    2724:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2726:	69 a9       	ldd	r22, Y+49	; 0x31
    2728:	7a a9       	ldd	r23, Y+50	; 0x32
    272a:	8b a9       	ldd	r24, Y+51	; 0x33
    272c:	9c a9       	ldd	r25, Y+52	; 0x34
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	40 e8       	ldi	r20, 0x80	; 128
    2734:	5f e3       	ldi	r21, 0x3F	; 63
    2736:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    273a:	88 23       	and	r24, r24
    273c:	2c f4       	brge	.+10     	; 0x2748 <main+0x50e>
		__ticks = 1;
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	98 ab       	std	Y+48, r25	; 0x30
    2744:	8f a7       	std	Y+47, r24	; 0x2f
    2746:	3f c0       	rjmp	.+126    	; 0x27c6 <main+0x58c>
	else if (__tmp > 65535)
    2748:	69 a9       	ldd	r22, Y+49	; 0x31
    274a:	7a a9       	ldd	r23, Y+50	; 0x32
    274c:	8b a9       	ldd	r24, Y+51	; 0x33
    274e:	9c a9       	ldd	r25, Y+52	; 0x34
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	3f ef       	ldi	r19, 0xFF	; 255
    2754:	4f e7       	ldi	r20, 0x7F	; 127
    2756:	57 e4       	ldi	r21, 0x47	; 71
    2758:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    275c:	18 16       	cp	r1, r24
    275e:	4c f5       	brge	.+82     	; 0x27b2 <main+0x578>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2760:	6d a9       	ldd	r22, Y+53	; 0x35
    2762:	7e a9       	ldd	r23, Y+54	; 0x36
    2764:	8f a9       	ldd	r24, Y+55	; 0x37
    2766:	98 ad       	ldd	r25, Y+56	; 0x38
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	40 e2       	ldi	r20, 0x20	; 32
    276e:	51 e4       	ldi	r21, 0x41	; 65
    2770:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	bc 01       	movw	r22, r24
    277a:	cd 01       	movw	r24, r26
    277c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	98 ab       	std	Y+48, r25	; 0x30
    2786:	8f a7       	std	Y+47, r24	; 0x2f
    2788:	0f c0       	rjmp	.+30     	; 0x27a8 <main+0x56e>
    278a:	89 e1       	ldi	r24, 0x19	; 25
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	9e a7       	std	Y+46, r25	; 0x2e
    2790:	8d a7       	std	Y+45, r24	; 0x2d
    2792:	8d a5       	ldd	r24, Y+45	; 0x2d
    2794:	9e a5       	ldd	r25, Y+46	; 0x2e
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	f1 f7       	brne	.-4      	; 0x2796 <main+0x55c>
    279a:	9e a7       	std	Y+46, r25	; 0x2e
    279c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279e:	8f a5       	ldd	r24, Y+47	; 0x2f
    27a0:	98 a9       	ldd	r25, Y+48	; 0x30
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	98 ab       	std	Y+48, r25	; 0x30
    27a6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    27aa:	98 a9       	ldd	r25, Y+48	; 0x30
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	69 f7       	brne	.-38     	; 0x278a <main+0x550>
    27b0:	14 c0       	rjmp	.+40     	; 0x27da <main+0x5a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b2:	69 a9       	ldd	r22, Y+49	; 0x31
    27b4:	7a a9       	ldd	r23, Y+50	; 0x32
    27b6:	8b a9       	ldd	r24, Y+51	; 0x33
    27b8:	9c a9       	ldd	r25, Y+52	; 0x34
    27ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	98 ab       	std	Y+48, r25	; 0x30
    27c4:	8f a7       	std	Y+47, r24	; 0x2f
    27c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    27c8:	98 a9       	ldd	r25, Y+48	; 0x30
    27ca:	9c a7       	std	Y+44, r25	; 0x2c
    27cc:	8b a7       	std	Y+43, r24	; 0x2b
    27ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    27d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	f1 f7       	brne	.-4      	; 0x27d2 <main+0x598>
    27d6:	9c a7       	std	Y+44, r25	; 0x2c
    27d8:	8b a7       	std	Y+43, r24	; 0x2b
		}
		_delay_ms(20);			/*Just delay for hanging in Protues*/
		if(temp >=30)
    27da:	fe 01       	movw	r30, r28
    27dc:	ed 59       	subi	r30, 0x9D	; 157
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	80 81       	ld	r24, Z
    27e2:	8e 31       	cpi	r24, 0x1E	; 30
    27e4:	08 f4       	brcc	.+2      	; 0x27e8 <main+0x5ae>
    27e6:	7b c0       	rjmp	.+246    	; 0x28de <main+0x6a4>
		{
			LCD_moveCursor(0,11);
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	6b e0       	ldi	r22, 0x0B	; 11
    27ec:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <LCD_moveCursor>
			LCD_displayString("ON ");
    27f0:	86 e9       	ldi	r24, 0x96	; 150
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_displayString>
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	a0 ea       	ldi	r26, 0xA0	; 160
    27fe:	b1 e4       	ldi	r27, 0x41	; 65
    2800:	8f a3       	std	Y+39, r24	; 0x27
    2802:	98 a7       	std	Y+40, r25	; 0x28
    2804:	a9 a7       	std	Y+41, r26	; 0x29
    2806:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2808:	6f a1       	ldd	r22, Y+39	; 0x27
    280a:	78 a5       	ldd	r23, Y+40	; 0x28
    280c:	89 a5       	ldd	r24, Y+41	; 0x29
    280e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	4a e7       	ldi	r20, 0x7A	; 122
    2816:	53 e4       	ldi	r21, 0x43	; 67
    2818:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	8b a3       	std	Y+35, r24	; 0x23
    2822:	9c a3       	std	Y+36, r25	; 0x24
    2824:	ad a3       	std	Y+37, r26	; 0x25
    2826:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2828:	6b a1       	ldd	r22, Y+35	; 0x23
    282a:	7c a1       	ldd	r23, Y+36	; 0x24
    282c:	8d a1       	ldd	r24, Y+37	; 0x25
    282e:	9e a1       	ldd	r25, Y+38	; 0x26
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 e8       	ldi	r20, 0x80	; 128
    2836:	5f e3       	ldi	r21, 0x3F	; 63
    2838:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    283c:	88 23       	and	r24, r24
    283e:	2c f4       	brge	.+10     	; 0x284a <main+0x610>
		__ticks = 1;
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	9a a3       	std	Y+34, r25	; 0x22
    2846:	89 a3       	std	Y+33, r24	; 0x21
    2848:	3f c0       	rjmp	.+126    	; 0x28c8 <main+0x68e>
	else if (__tmp > 65535)
    284a:	6b a1       	ldd	r22, Y+35	; 0x23
    284c:	7c a1       	ldd	r23, Y+36	; 0x24
    284e:	8d a1       	ldd	r24, Y+37	; 0x25
    2850:	9e a1       	ldd	r25, Y+38	; 0x26
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	3f ef       	ldi	r19, 0xFF	; 255
    2856:	4f e7       	ldi	r20, 0x7F	; 127
    2858:	57 e4       	ldi	r21, 0x47	; 71
    285a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    285e:	18 16       	cp	r1, r24
    2860:	4c f5       	brge	.+82     	; 0x28b4 <main+0x67a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2862:	6f a1       	ldd	r22, Y+39	; 0x27
    2864:	78 a5       	ldd	r23, Y+40	; 0x28
    2866:	89 a5       	ldd	r24, Y+41	; 0x29
    2868:	9a a5       	ldd	r25, Y+42	; 0x2a
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e2       	ldi	r20, 0x20	; 32
    2870:	51 e4       	ldi	r21, 0x41	; 65
    2872:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	bc 01       	movw	r22, r24
    287c:	cd 01       	movw	r24, r26
    287e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	9a a3       	std	Y+34, r25	; 0x22
    2888:	89 a3       	std	Y+33, r24	; 0x21
    288a:	0f c0       	rjmp	.+30     	; 0x28aa <main+0x670>
    288c:	89 e1       	ldi	r24, 0x19	; 25
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	98 a3       	std	Y+32, r25	; 0x20
    2892:	8f 8f       	std	Y+31, r24	; 0x1f
    2894:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2896:	98 a1       	ldd	r25, Y+32	; 0x20
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	f1 f7       	brne	.-4      	; 0x2898 <main+0x65e>
    289c:	98 a3       	std	Y+32, r25	; 0x20
    289e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a0:	89 a1       	ldd	r24, Y+33	; 0x21
    28a2:	9a a1       	ldd	r25, Y+34	; 0x22
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	9a a3       	std	Y+34, r25	; 0x22
    28a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28aa:	89 a1       	ldd	r24, Y+33	; 0x21
    28ac:	9a a1       	ldd	r25, Y+34	; 0x22
    28ae:	00 97       	sbiw	r24, 0x00	; 0
    28b0:	69 f7       	brne	.-38     	; 0x288c <main+0x652>
    28b2:	8f c0       	rjmp	.+286    	; 0x29d2 <main+0x798>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b4:	6b a1       	ldd	r22, Y+35	; 0x23
    28b6:	7c a1       	ldd	r23, Y+36	; 0x24
    28b8:	8d a1       	ldd	r24, Y+37	; 0x25
    28ba:	9e a1       	ldd	r25, Y+38	; 0x26
    28bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	9a a3       	std	Y+34, r25	; 0x22
    28c6:	89 a3       	std	Y+33, r24	; 0x21
    28c8:	89 a1       	ldd	r24, Y+33	; 0x21
    28ca:	9a a1       	ldd	r25, Y+34	; 0x22
    28cc:	9e 8f       	std	Y+30, r25	; 0x1e
    28ce:	8d 8f       	std	Y+29, r24	; 0x1d
    28d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <main+0x69a>
    28d8:	9e 8f       	std	Y+30, r25	; 0x1e
    28da:	8d 8f       	std	Y+29, r24	; 0x1d
    28dc:	7a c0       	rjmp	.+244    	; 0x29d2 <main+0x798>
			_delay_ms(20);		/*Just delay for hanging in Protues*/
		}
		else
		{
			LCD_moveCursor(0,11);
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	6b e0       	ldi	r22, 0x0B	; 11
    28e2:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <LCD_moveCursor>
			LCD_displayString("OFF");
    28e6:	8a e9       	ldi	r24, 0x9A	; 154
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_displayString>
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	a0 ea       	ldi	r26, 0xA0	; 160
    28f4:	b1 e4       	ldi	r27, 0x41	; 65
    28f6:	89 8f       	std	Y+25, r24	; 0x19
    28f8:	9a 8f       	std	Y+26, r25	; 0x1a
    28fa:	ab 8f       	std	Y+27, r26	; 0x1b
    28fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2900:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2902:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2904:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	4a e7       	ldi	r20, 0x7A	; 122
    290c:	53 e4       	ldi	r21, 0x43	; 67
    290e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	8d 8b       	std	Y+21, r24	; 0x15
    2918:	9e 8b       	std	Y+22, r25	; 0x16
    291a:	af 8b       	std	Y+23, r26	; 0x17
    291c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    291e:	6d 89       	ldd	r22, Y+21	; 0x15
    2920:	7e 89       	ldd	r23, Y+22	; 0x16
    2922:	8f 89       	ldd	r24, Y+23	; 0x17
    2924:	98 8d       	ldd	r25, Y+24	; 0x18
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	40 e8       	ldi	r20, 0x80	; 128
    292c:	5f e3       	ldi	r21, 0x3F	; 63
    292e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2932:	88 23       	and	r24, r24
    2934:	2c f4       	brge	.+10     	; 0x2940 <main+0x706>
		__ticks = 1;
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	9c 8b       	std	Y+20, r25	; 0x14
    293c:	8b 8b       	std	Y+19, r24	; 0x13
    293e:	3f c0       	rjmp	.+126    	; 0x29be <main+0x784>
	else if (__tmp > 65535)
    2940:	6d 89       	ldd	r22, Y+21	; 0x15
    2942:	7e 89       	ldd	r23, Y+22	; 0x16
    2944:	8f 89       	ldd	r24, Y+23	; 0x17
    2946:	98 8d       	ldd	r25, Y+24	; 0x18
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	3f ef       	ldi	r19, 0xFF	; 255
    294c:	4f e7       	ldi	r20, 0x7F	; 127
    294e:	57 e4       	ldi	r21, 0x47	; 71
    2950:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2954:	18 16       	cp	r1, r24
    2956:	4c f5       	brge	.+82     	; 0x29aa <main+0x770>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2958:	69 8d       	ldd	r22, Y+25	; 0x19
    295a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    295c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    295e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	40 e2       	ldi	r20, 0x20	; 32
    2966:	51 e4       	ldi	r21, 0x41	; 65
    2968:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	bc 01       	movw	r22, r24
    2972:	cd 01       	movw	r24, r26
    2974:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	9c 8b       	std	Y+20, r25	; 0x14
    297e:	8b 8b       	std	Y+19, r24	; 0x13
    2980:	0f c0       	rjmp	.+30     	; 0x29a0 <main+0x766>
    2982:	89 e1       	ldi	r24, 0x19	; 25
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	9a 8b       	std	Y+18, r25	; 0x12
    2988:	89 8b       	std	Y+17, r24	; 0x11
    298a:	89 89       	ldd	r24, Y+17	; 0x11
    298c:	9a 89       	ldd	r25, Y+18	; 0x12
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	f1 f7       	brne	.-4      	; 0x298e <main+0x754>
    2992:	9a 8b       	std	Y+18, r25	; 0x12
    2994:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2996:	8b 89       	ldd	r24, Y+19	; 0x13
    2998:	9c 89       	ldd	r25, Y+20	; 0x14
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	9c 8b       	std	Y+20, r25	; 0x14
    299e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a0:	8b 89       	ldd	r24, Y+19	; 0x13
    29a2:	9c 89       	ldd	r25, Y+20	; 0x14
    29a4:	00 97       	sbiw	r24, 0x00	; 0
    29a6:	69 f7       	brne	.-38     	; 0x2982 <main+0x748>
    29a8:	14 c0       	rjmp	.+40     	; 0x29d2 <main+0x798>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29aa:	6d 89       	ldd	r22, Y+21	; 0x15
    29ac:	7e 89       	ldd	r23, Y+22	; 0x16
    29ae:	8f 89       	ldd	r24, Y+23	; 0x17
    29b0:	98 8d       	ldd	r25, Y+24	; 0x18
    29b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	9c 8b       	std	Y+20, r25	; 0x14
    29bc:	8b 8b       	std	Y+19, r24	; 0x13
    29be:	8b 89       	ldd	r24, Y+19	; 0x13
    29c0:	9c 89       	ldd	r25, Y+20	; 0x14
    29c2:	98 8b       	std	Y+16, r25	; 0x10
    29c4:	8f 87       	std	Y+15, r24	; 0x0f
    29c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29c8:	98 89       	ldd	r25, Y+16	; 0x10
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	f1 f7       	brne	.-4      	; 0x29ca <main+0x790>
    29ce:	98 8b       	std	Y+16, r25	; 0x10
    29d0:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(20);		/*Just delay for hanging in Protues*/
		}
		/*
		 * Accroding to temperature will send speed*/

		if(temp<30)
    29d2:	fe 01       	movw	r30, r28
    29d4:	ed 59       	subi	r30, 0x9D	; 157
    29d6:	ff 4f       	sbci	r31, 0xFF	; 255
    29d8:	80 81       	ld	r24, Z
    29da:	8e 31       	cpi	r24, 0x1E	; 30
    29dc:	28 f4       	brcc	.+10     	; 0x29e8 <main+0x7ae>
		{
			DcMotor_Rotate(Stop,0);
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	60 e0       	ldi	r22, 0x00	; 0
    29e2:	0e 94 90 07 	call	0xf20	; 0xf20 <DcMotor_Rotate>
    29e6:	3d c0       	rjmp	.+122    	; 0x2a62 <main+0x828>
		}

		else if(temp >=30 && temp<60)
    29e8:	fe 01       	movw	r30, r28
    29ea:	ed 59       	subi	r30, 0x9D	; 157
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	80 81       	ld	r24, Z
    29f0:	8e 31       	cpi	r24, 0x1E	; 30
    29f2:	58 f0       	brcs	.+22     	; 0x2a0a <main+0x7d0>
    29f4:	fe 01       	movw	r30, r28
    29f6:	ed 59       	subi	r30, 0x9D	; 157
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	80 81       	ld	r24, Z
    29fc:	8c 33       	cpi	r24, 0x3C	; 60
    29fe:	28 f4       	brcc	.+10     	; 0x2a0a <main+0x7d0>
		{
			DcMotor_Rotate(Clock_Wise,25);
    2a00:	82 e0       	ldi	r24, 0x02	; 2
    2a02:	69 e1       	ldi	r22, 0x19	; 25
    2a04:	0e 94 90 07 	call	0xf20	; 0xf20 <DcMotor_Rotate>
    2a08:	2c c0       	rjmp	.+88     	; 0x2a62 <main+0x828>
		}
		else if(temp >=60 && temp <90)
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	ed 59       	subi	r30, 0x9D	; 157
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	80 81       	ld	r24, Z
    2a12:	8c 33       	cpi	r24, 0x3C	; 60
    2a14:	58 f0       	brcs	.+22     	; 0x2a2c <main+0x7f2>
    2a16:	fe 01       	movw	r30, r28
    2a18:	ed 59       	subi	r30, 0x9D	; 157
    2a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1c:	80 81       	ld	r24, Z
    2a1e:	8a 35       	cpi	r24, 0x5A	; 90
    2a20:	28 f4       	brcc	.+10     	; 0x2a2c <main+0x7f2>
		{
		DcMotor_Rotate(Clock_Wise,50);
    2a22:	82 e0       	ldi	r24, 0x02	; 2
    2a24:	62 e3       	ldi	r22, 0x32	; 50
    2a26:	0e 94 90 07 	call	0xf20	; 0xf20 <DcMotor_Rotate>
    2a2a:	1b c0       	rjmp	.+54     	; 0x2a62 <main+0x828>
		}
		else if(temp>=90 && temp <120)
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	ed 59       	subi	r30, 0x9D	; 157
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	80 81       	ld	r24, Z
    2a34:	8a 35       	cpi	r24, 0x5A	; 90
    2a36:	58 f0       	brcs	.+22     	; 0x2a4e <main+0x814>
    2a38:	fe 01       	movw	r30, r28
    2a3a:	ed 59       	subi	r30, 0x9D	; 157
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	80 81       	ld	r24, Z
    2a40:	88 37       	cpi	r24, 0x78	; 120
    2a42:	28 f4       	brcc	.+10     	; 0x2a4e <main+0x814>
		{
			DcMotor_Rotate(Clock_Wise,75);
    2a44:	82 e0       	ldi	r24, 0x02	; 2
    2a46:	6b e4       	ldi	r22, 0x4B	; 75
    2a48:	0e 94 90 07 	call	0xf20	; 0xf20 <DcMotor_Rotate>
    2a4c:	0a c0       	rjmp	.+20     	; 0x2a62 <main+0x828>
		}
		else if(temp>=120)
    2a4e:	fe 01       	movw	r30, r28
    2a50:	ed 59       	subi	r30, 0x9D	; 157
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	80 81       	ld	r24, Z
    2a56:	88 37       	cpi	r24, 0x78	; 120
    2a58:	20 f0       	brcs	.+8      	; 0x2a62 <main+0x828>
		{
			DcMotor_Rotate(Clock_Wise,100);
    2a5a:	82 e0       	ldi	r24, 0x02	; 2
    2a5c:	64 e6       	ldi	r22, 0x64	; 100
    2a5e:	0e 94 90 07 	call	0xf20	; 0xf20 <DcMotor_Rotate>
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	a0 ea       	ldi	r26, 0xA0	; 160
    2a68:	b1 e4       	ldi	r27, 0x41	; 65
    2a6a:	8b 87       	std	Y+11, r24	; 0x0b
    2a6c:	9c 87       	std	Y+12, r25	; 0x0c
    2a6e:	ad 87       	std	Y+13, r26	; 0x0d
    2a70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a72:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a74:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	4a e7       	ldi	r20, 0x7A	; 122
    2a80:	53 e4       	ldi	r21, 0x43	; 67
    2a82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	8f 83       	std	Y+7, r24	; 0x07
    2a8c:	98 87       	std	Y+8, r25	; 0x08
    2a8e:	a9 87       	std	Y+9, r26	; 0x09
    2a90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a92:	6f 81       	ldd	r22, Y+7	; 0x07
    2a94:	78 85       	ldd	r23, Y+8	; 0x08
    2a96:	89 85       	ldd	r24, Y+9	; 0x09
    2a98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	40 e8       	ldi	r20, 0x80	; 128
    2aa0:	5f e3       	ldi	r21, 0x3F	; 63
    2aa2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2aa6:	88 23       	and	r24, r24
    2aa8:	2c f4       	brge	.+10     	; 0x2ab4 <main+0x87a>
		__ticks = 1;
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	9e 83       	std	Y+6, r25	; 0x06
    2ab0:	8d 83       	std	Y+5, r24	; 0x05
    2ab2:	3f c0       	rjmp	.+126    	; 0x2b32 <main+0x8f8>
	else if (__tmp > 65535)
    2ab4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ab6:	78 85       	ldd	r23, Y+8	; 0x08
    2ab8:	89 85       	ldd	r24, Y+9	; 0x09
    2aba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	3f ef       	ldi	r19, 0xFF	; 255
    2ac0:	4f e7       	ldi	r20, 0x7F	; 127
    2ac2:	57 e4       	ldi	r21, 0x47	; 71
    2ac4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2ac8:	18 16       	cp	r1, r24
    2aca:	4c f5       	brge	.+82     	; 0x2b1e <main+0x8e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2acc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ace:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ad0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ad2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	40 e2       	ldi	r20, 0x20	; 32
    2ada:	51 e4       	ldi	r21, 0x41	; 65
    2adc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	bc 01       	movw	r22, r24
    2ae6:	cd 01       	movw	r24, r26
    2ae8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	9e 83       	std	Y+6, r25	; 0x06
    2af2:	8d 83       	std	Y+5, r24	; 0x05
    2af4:	0f c0       	rjmp	.+30     	; 0x2b14 <main+0x8da>
    2af6:	89 e1       	ldi	r24, 0x19	; 25
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	9c 83       	std	Y+4, r25	; 0x04
    2afc:	8b 83       	std	Y+3, r24	; 0x03
    2afe:	8b 81       	ldd	r24, Y+3	; 0x03
    2b00:	9c 81       	ldd	r25, Y+4	; 0x04
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	f1 f7       	brne	.-4      	; 0x2b02 <main+0x8c8>
    2b06:	9c 83       	std	Y+4, r25	; 0x04
    2b08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0e:	01 97       	sbiw	r24, 0x01	; 1
    2b10:	9e 83       	std	Y+6, r25	; 0x06
    2b12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b14:	8d 81       	ldd	r24, Y+5	; 0x05
    2b16:	9e 81       	ldd	r25, Y+6	; 0x06
    2b18:	00 97       	sbiw	r24, 0x00	; 0
    2b1a:	69 f7       	brne	.-38     	; 0x2af6 <main+0x8bc>
    2b1c:	3e cd       	rjmp	.-1412   	; 0x259a <main+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b20:	78 85       	ldd	r23, Y+8	; 0x08
    2b22:	89 85       	ldd	r24, Y+9	; 0x09
    2b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	9e 83       	std	Y+6, r25	; 0x06
    2b30:	8d 83       	std	Y+5, r24	; 0x05
    2b32:	8d 81       	ldd	r24, Y+5	; 0x05
    2b34:	9e 81       	ldd	r25, Y+6	; 0x06
    2b36:	9a 83       	std	Y+2, r25	; 0x02
    2b38:	89 83       	std	Y+1, r24	; 0x01
    2b3a:	89 81       	ldd	r24, Y+1	; 0x01
    2b3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <main+0x904>
    2b42:	9a 83       	std	Y+2, r25	; 0x02
    2b44:	89 83       	std	Y+1, r24	; 0x01
    2b46:	29 cd       	rjmp	.-1454   	; 0x259a <main+0x360>

00002b48 <__mulsi3>:
    2b48:	62 9f       	mul	r22, r18
    2b4a:	d0 01       	movw	r26, r0
    2b4c:	73 9f       	mul	r23, r19
    2b4e:	f0 01       	movw	r30, r0
    2b50:	82 9f       	mul	r24, r18
    2b52:	e0 0d       	add	r30, r0
    2b54:	f1 1d       	adc	r31, r1
    2b56:	64 9f       	mul	r22, r20
    2b58:	e0 0d       	add	r30, r0
    2b5a:	f1 1d       	adc	r31, r1
    2b5c:	92 9f       	mul	r25, r18
    2b5e:	f0 0d       	add	r31, r0
    2b60:	83 9f       	mul	r24, r19
    2b62:	f0 0d       	add	r31, r0
    2b64:	74 9f       	mul	r23, r20
    2b66:	f0 0d       	add	r31, r0
    2b68:	65 9f       	mul	r22, r21
    2b6a:	f0 0d       	add	r31, r0
    2b6c:	99 27       	eor	r25, r25
    2b6e:	72 9f       	mul	r23, r18
    2b70:	b0 0d       	add	r27, r0
    2b72:	e1 1d       	adc	r30, r1
    2b74:	f9 1f       	adc	r31, r25
    2b76:	63 9f       	mul	r22, r19
    2b78:	b0 0d       	add	r27, r0
    2b7a:	e1 1d       	adc	r30, r1
    2b7c:	f9 1f       	adc	r31, r25
    2b7e:	bd 01       	movw	r22, r26
    2b80:	cf 01       	movw	r24, r30
    2b82:	11 24       	eor	r1, r1
    2b84:	08 95       	ret

00002b86 <__udivmodhi4>:
    2b86:	aa 1b       	sub	r26, r26
    2b88:	bb 1b       	sub	r27, r27
    2b8a:	51 e1       	ldi	r21, 0x11	; 17
    2b8c:	07 c0       	rjmp	.+14     	; 0x2b9c <__udivmodhi4_ep>

00002b8e <__udivmodhi4_loop>:
    2b8e:	aa 1f       	adc	r26, r26
    2b90:	bb 1f       	adc	r27, r27
    2b92:	a6 17       	cp	r26, r22
    2b94:	b7 07       	cpc	r27, r23
    2b96:	10 f0       	brcs	.+4      	; 0x2b9c <__udivmodhi4_ep>
    2b98:	a6 1b       	sub	r26, r22
    2b9a:	b7 0b       	sbc	r27, r23

00002b9c <__udivmodhi4_ep>:
    2b9c:	88 1f       	adc	r24, r24
    2b9e:	99 1f       	adc	r25, r25
    2ba0:	5a 95       	dec	r21
    2ba2:	a9 f7       	brne	.-22     	; 0x2b8e <__udivmodhi4_loop>
    2ba4:	80 95       	com	r24
    2ba6:	90 95       	com	r25
    2ba8:	bc 01       	movw	r22, r24
    2baa:	cd 01       	movw	r24, r26
    2bac:	08 95       	ret

00002bae <__prologue_saves__>:
    2bae:	2f 92       	push	r2
    2bb0:	3f 92       	push	r3
    2bb2:	4f 92       	push	r4
    2bb4:	5f 92       	push	r5
    2bb6:	6f 92       	push	r6
    2bb8:	7f 92       	push	r7
    2bba:	8f 92       	push	r8
    2bbc:	9f 92       	push	r9
    2bbe:	af 92       	push	r10
    2bc0:	bf 92       	push	r11
    2bc2:	cf 92       	push	r12
    2bc4:	df 92       	push	r13
    2bc6:	ef 92       	push	r14
    2bc8:	ff 92       	push	r15
    2bca:	0f 93       	push	r16
    2bcc:	1f 93       	push	r17
    2bce:	cf 93       	push	r28
    2bd0:	df 93       	push	r29
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
    2bd6:	ca 1b       	sub	r28, r26
    2bd8:	db 0b       	sbc	r29, r27
    2bda:	0f b6       	in	r0, 0x3f	; 63
    2bdc:	f8 94       	cli
    2bde:	de bf       	out	0x3e, r29	; 62
    2be0:	0f be       	out	0x3f, r0	; 63
    2be2:	cd bf       	out	0x3d, r28	; 61
    2be4:	09 94       	ijmp

00002be6 <__epilogue_restores__>:
    2be6:	2a 88       	ldd	r2, Y+18	; 0x12
    2be8:	39 88       	ldd	r3, Y+17	; 0x11
    2bea:	48 88       	ldd	r4, Y+16	; 0x10
    2bec:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bee:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bf0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bf2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bf4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bf6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bf8:	b9 84       	ldd	r11, Y+9	; 0x09
    2bfa:	c8 84       	ldd	r12, Y+8	; 0x08
    2bfc:	df 80       	ldd	r13, Y+7	; 0x07
    2bfe:	ee 80       	ldd	r14, Y+6	; 0x06
    2c00:	fd 80       	ldd	r15, Y+5	; 0x05
    2c02:	0c 81       	ldd	r16, Y+4	; 0x04
    2c04:	1b 81       	ldd	r17, Y+3	; 0x03
    2c06:	aa 81       	ldd	r26, Y+2	; 0x02
    2c08:	b9 81       	ldd	r27, Y+1	; 0x01
    2c0a:	ce 0f       	add	r28, r30
    2c0c:	d1 1d       	adc	r29, r1
    2c0e:	0f b6       	in	r0, 0x3f	; 63
    2c10:	f8 94       	cli
    2c12:	de bf       	out	0x3e, r29	; 62
    2c14:	0f be       	out	0x3f, r0	; 63
    2c16:	cd bf       	out	0x3d, r28	; 61
    2c18:	ed 01       	movw	r28, r26
    2c1a:	08 95       	ret

00002c1c <itoa>:
    2c1c:	fb 01       	movw	r30, r22
    2c1e:	9f 01       	movw	r18, r30
    2c20:	e8 94       	clt
    2c22:	42 30       	cpi	r20, 0x02	; 2
    2c24:	c4 f0       	brlt	.+48     	; 0x2c56 <itoa+0x3a>
    2c26:	45 32       	cpi	r20, 0x25	; 37
    2c28:	b4 f4       	brge	.+44     	; 0x2c56 <itoa+0x3a>
    2c2a:	4a 30       	cpi	r20, 0x0A	; 10
    2c2c:	29 f4       	brne	.+10     	; 0x2c38 <itoa+0x1c>
    2c2e:	97 fb       	bst	r25, 7
    2c30:	1e f4       	brtc	.+6      	; 0x2c38 <itoa+0x1c>
    2c32:	90 95       	com	r25
    2c34:	81 95       	neg	r24
    2c36:	9f 4f       	sbci	r25, 0xFF	; 255
    2c38:	64 2f       	mov	r22, r20
    2c3a:	77 27       	eor	r23, r23
    2c3c:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <__udivmodhi4>
    2c40:	80 5d       	subi	r24, 0xD0	; 208
    2c42:	8a 33       	cpi	r24, 0x3A	; 58
    2c44:	0c f0       	brlt	.+2      	; 0x2c48 <itoa+0x2c>
    2c46:	89 5d       	subi	r24, 0xD9	; 217
    2c48:	81 93       	st	Z+, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	00 97       	sbiw	r24, 0x00	; 0
    2c4e:	a1 f7       	brne	.-24     	; 0x2c38 <itoa+0x1c>
    2c50:	16 f4       	brtc	.+4      	; 0x2c56 <itoa+0x3a>
    2c52:	5d e2       	ldi	r21, 0x2D	; 45
    2c54:	51 93       	st	Z+, r21
    2c56:	10 82       	st	Z, r1
    2c58:	c9 01       	movw	r24, r18
    2c5a:	0c 94 2f 16 	jmp	0x2c5e	; 0x2c5e <strrev>

00002c5e <strrev>:
    2c5e:	dc 01       	movw	r26, r24
    2c60:	fc 01       	movw	r30, r24
    2c62:	67 2f       	mov	r22, r23
    2c64:	71 91       	ld	r23, Z+
    2c66:	77 23       	and	r23, r23
    2c68:	e1 f7       	brne	.-8      	; 0x2c62 <strrev+0x4>
    2c6a:	32 97       	sbiw	r30, 0x02	; 2
    2c6c:	04 c0       	rjmp	.+8      	; 0x2c76 <strrev+0x18>
    2c6e:	7c 91       	ld	r23, X
    2c70:	6d 93       	st	X+, r22
    2c72:	70 83       	st	Z, r23
    2c74:	62 91       	ld	r22, -Z
    2c76:	ae 17       	cp	r26, r30
    2c78:	bf 07       	cpc	r27, r31
    2c7a:	c8 f3       	brcs	.-14     	; 0x2c6e <strrev+0x10>
    2c7c:	08 95       	ret

00002c7e <_exit>:
    2c7e:	f8 94       	cli

00002c80 <__stop_program>:
    2c80:	ff cf       	rjmp	.-2      	; 0x2c80 <__stop_program>
